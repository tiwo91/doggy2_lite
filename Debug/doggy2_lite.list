
doggy2_lite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800433c  0800433c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004394  08004394  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800439c  0800439c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000014  080043b0  080043b0  000143b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000070  08004434  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004434  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012413  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd4  00000000  00000000  000324b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00035488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00036200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022cad  00000000  00000000  00036eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edb8  00000000  00000000  00059b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cab42  00000000  00000000  00068915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00133457  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d0  00000000  00000000  001334ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004324 	.word	0x08004324

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004324 	.word	0x08004324

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <_ZN3LEDC1Ev>:
 *      Author: tiwo
 */

#include "LED.h"

LED::LED() {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	4a34      	ldr	r2, [pc, #208]	; (800059c <_ZN3LEDC1Ev+0xdc>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	601a      	str	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
 80004e2:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a2e      	ldr	r2, [pc, #184]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 80004e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b2c      	ldr	r3, [pc, #176]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	4b28      	ldr	r3, [pc, #160]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a27      	ldr	r2, [pc, #156]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 8000504:	f043 0308 	orr.w	r3, r3, #8
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0308 	and.w	r3, r3, #8
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 8000558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <_ZN3LEDC1Ev+0xe0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	21e0      	movs	r1, #224	; 0xe0
 800056e:	480d      	ldr	r0, [pc, #52]	; (80005a4 <_ZN3LEDC1Ev+0xe4>)
 8000570:	f001 ff30 	bl	80023d4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : PI5 PI6 PI7 */
	  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000574:	23e0      	movs	r3, #224	; 0xe0
 8000576:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000584:	f107 031c 	add.w	r3, r7, #28
 8000588:	4619      	mov	r1, r3
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <_ZN3LEDC1Ev+0xe4>)
 800058c:	f001 fd6e 	bl	800206c <HAL_GPIO_Init>

}
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4618      	mov	r0, r3
 8000594:	3730      	adds	r7, #48	; 0x30
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	08004344 	.word	0x08004344
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40022000 	.word	0x40022000

080005a8 <_ZN3LEDD1Ev>:

LED::~LED() {
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <_ZN3LEDD1Ev+0x1c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	08004344 	.word	0x08004344

080005c8 <_ZN3LEDD0Ev>:
LED::~LED() {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
}
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff ffe9 	bl	80005a8 <_ZN3LEDD1Ev>
 80005d6:	2104      	movs	r1, #4
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f003 fe0d 	bl	80041f8 <_ZdlPvj>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <_ZN3LED6led_onEt>:

/* USER CODE BEGIN 4 */
void LED::led_on(uint16_t led_) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOI, led_, GPIO_PIN_SET);
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	2201      	movs	r2, #1
 80005f8:	4619      	mov	r1, r3
 80005fa:	4803      	ldr	r0, [pc, #12]	; (8000608 <_ZN3LED6led_onEt+0x20>)
 80005fc:	f001 feea 	bl	80023d4 <HAL_GPIO_WritePin>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40022000 	.word	0x40022000

0800060c <_ZN3LED7led_offEt>:

void LED::led_off(uint16_t led_) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOI, led_, GPIO_PIN_RESET);
 8000618:	887b      	ldrh	r3, [r7, #2]
 800061a:	2200      	movs	r2, #0
 800061c:	4619      	mov	r1, r3
 800061e:	4803      	ldr	r0, [pc, #12]	; (800062c <_ZN3LED7led_offEt+0x20>)
 8000620:	f001 fed8 	bl	80023d4 <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40022000 	.word	0x40022000

08000630 <_ZN3LED10led_toggleEt>:

void LED::led_toggle(uint16_t led_) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	807b      	strh	r3, [r7, #2]
	if(HAL_GPIO_ReadPin(GPIOI, led_)) {
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	4619      	mov	r1, r3
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <_ZN3LED10led_toggleEt+0x48>)
 8000642:	f001 feaf 	bl	80023a4 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	bf14      	ite	ne
 800064c:	2301      	movne	r3, #1
 800064e:	2300      	moveq	r3, #0
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <_ZN3LED10led_toggleEt+0x34>
		HAL_GPIO_WritePin(GPIOI, led_, GPIO_PIN_RESET);
 8000656:	887b      	ldrh	r3, [r7, #2]
 8000658:	2200      	movs	r2, #0
 800065a:	4619      	mov	r1, r3
 800065c:	4806      	ldr	r0, [pc, #24]	; (8000678 <_ZN3LED10led_toggleEt+0x48>)
 800065e:	f001 feb9 	bl	80023d4 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOI, led_, GPIO_PIN_SET);
	}

}
 8000662:	e005      	b.n	8000670 <_ZN3LED10led_toggleEt+0x40>
		HAL_GPIO_WritePin(GPIOI, led_, GPIO_PIN_SET);
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	2201      	movs	r2, #1
 8000668:	4619      	mov	r1, r3
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <_ZN3LED10led_toggleEt+0x48>)
 800066c:	f001 feb2 	bl	80023d4 <HAL_GPIO_WritePin>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40022000 	.word	0x40022000

0800067c <_Z41__static_initialization_and_destruction_0ii>:

namespace LEDns {
LED led;
}
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d107      	bne.n	800069c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000692:	4293      	cmp	r3, r2
 8000694:	d102      	bne.n	800069c <_Z41__static_initialization_and_destruction_0ii+0x20>
LED led;
 8000696:	4809      	ldr	r0, [pc, #36]	; (80006bc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000698:	f7ff ff12 	bl	80004c0 <_ZN3LEDC1Ev>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d107      	bne.n	80006b2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d102      	bne.n	80006b2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80006ac:	4803      	ldr	r0, [pc, #12]	; (80006bc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80006ae:	f7ff ff7b 	bl	80005a8 <_ZN3LEDD1Ev>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000008c 	.word	0x2000008c

080006c0 <_GLOBAL__sub_I__ZN3LEDC2Ev>:
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006c8:	2001      	movs	r0, #1
 80006ca:	f7ff ffd7 	bl	800067c <_Z41__static_initialization_and_destruction_0ii>
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <_GLOBAL__sub_D__ZN3LEDC2Ev>:
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff ffcf 	bl	800067c <_Z41__static_initialization_and_destruction_0ii>
 80006de:	bd80      	pop	{r7, pc}

080006e0 <_ZN5MotorC1Ev>:
 *      Author: tiwo
 */

#include "Motor.h"

Motor::Motor() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08e      	sub	sp, #56	; 0x38
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	4a7a      	ldr	r2, [pc, #488]	; (80008d4 <_ZN5MotorC1Ev+0x1f4>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	601a      	str	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
 8000702:	4b75      	ldr	r3, [pc, #468]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a74      	ldr	r2, [pc, #464]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b72      	ldr	r3, [pc, #456]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	623b      	str	r3, [r7, #32]
 8000718:	6a3b      	ldr	r3, [r7, #32]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
 800071e:	4b6e      	ldr	r3, [pc, #440]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a6d      	ldr	r2, [pc, #436]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b6b      	ldr	r3, [pc, #428]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
 8000734:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	4b67      	ldr	r3, [pc, #412]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a66      	ldr	r2, [pc, #408]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b64      	ldr	r3, [pc, #400]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	61bb      	str	r3, [r7, #24]
 8000750:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	4b60      	ldr	r3, [pc, #384]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a5f      	ldr	r2, [pc, #380]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b5d      	ldr	r3, [pc, #372]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a58      	ldr	r2, [pc, #352]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b56      	ldr	r3, [pc, #344]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b52      	ldr	r3, [pc, #328]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a51      	ldr	r2, [pc, #324]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b4f      	ldr	r3, [pc, #316]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a4a      	ldr	r2, [pc, #296]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 80007b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b48      	ldr	r3, [pc, #288]	; (80008d8 <_ZN5MotorC1Ev+0x1f8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_14, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 80007c8:	4844      	ldr	r0, [pc, #272]	; (80008dc <_ZN5MotorC1Ev+0x1fc>)
 80007ca:	f001 fe03 	bl	80023d4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f640 6104 	movw	r1, #3588	; 0xe04
 80007d4:	4842      	ldr	r0, [pc, #264]	; (80008e0 <_ZN5MotorC1Ev+0x200>)
 80007d6:	f001 fdfd 	bl	80023d4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	4841      	ldr	r0, [pc, #260]	; (80008e4 <_ZN5MotorC1Ev+0x204>)
 80007e0:	f001 fdf8 	bl	80023d4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	21e0      	movs	r1, #224	; 0xe0
 80007e8:	483f      	ldr	r0, [pc, #252]	; (80008e8 <_ZN5MotorC1Ev+0x208>)
 80007ea:	f001 fdf3 	bl	80023d4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : PB10 PB14 */
	  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 80007ee:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000804:	4619      	mov	r1, r3
 8000806:	4835      	ldr	r0, [pc, #212]	; (80008dc <_ZN5MotorC1Ev+0x1fc>)
 8000808:	f001 fc30 	bl	800206c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PH8 */
	  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800080c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	4832      	ldr	r0, [pc, #200]	; (80008ec <_ZN5MotorC1Ev+0x20c>)
 8000822:	f001 fc23 	bl	800206c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PG2 PG9 PG10 PG11 */
	  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000826:	f640 6304 	movw	r3, #3588	; 0xe04
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083c:	4619      	mov	r1, r3
 800083e:	4828      	ldr	r0, [pc, #160]	; (80008e0 <_ZN5MotorC1Ev+0x200>)
 8000840:	f001 fc14 	bl	800206c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PC9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	4619      	mov	r1, r3
 8000858:	4825      	ldr	r0, [pc, #148]	; (80008f0 <_ZN5MotorC1Ev+0x210>)
 800085a:	f001 fc07 	bl	800206c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA11 */
	  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800085e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000870:	4619      	mov	r1, r3
 8000872:	4820      	ldr	r0, [pc, #128]	; (80008f4 <_ZN5MotorC1Ev+0x214>)
 8000874:	f001 fbfa 	bl	800206c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PD0 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000878:	2301      	movs	r3, #1
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	4619      	mov	r1, r3
 800088a:	4816      	ldr	r0, [pc, #88]	; (80008e4 <_ZN5MotorC1Ev+0x204>)
 800088c:	f001 fbee 	bl	800206c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PD7 */
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	480f      	ldr	r0, [pc, #60]	; (80008e4 <_ZN5MotorC1Ev+0x204>)
 80008a8:	f001 fbe0 	bl	800206c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PI5 PI6 PI7 */
	  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008ac:	23e0      	movs	r3, #224	; 0xe0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	4619      	mov	r1, r3
 80008c2:	4809      	ldr	r0, [pc, #36]	; (80008e8 <_ZN5MotorC1Ev+0x208>)
 80008c4:	f001 fbd2 	bl	800206c <HAL_GPIO_Init>

}
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4618      	mov	r0, r3
 80008cc:	3738      	adds	r7, #56	; 0x38
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	08004354 	.word	0x08004354
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020400 	.word	0x40020400
 80008e0:	40021800 	.word	0x40021800
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	40022000 	.word	0x40022000
 80008ec:	40021c00 	.word	0x40021c00
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40020000 	.word	0x40020000

080008f8 <_ZN5MotorD1Ev>:

Motor::~Motor() {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <_ZN5MotorD1Ev+0x1c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	08004354 	.word	0x08004354

08000918 <_ZN5MotorD0Ev>:
Motor::~Motor() {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
}
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ffe9 	bl	80008f8 <_ZN5MotorD1Ev>
 8000926:	2104      	movs	r1, #4
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f003 fc65 	bl	80041f8 <_ZdlPvj>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <_ZN5Motor9initMotorEv>:

void Motor::initMotor(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	/** Decay mode pins **/
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2104      	movs	r1, #4
 8000944:	480e      	ldr	r0, [pc, #56]	; (8000980 <_ZN5Motor9initMotorEv+0x48>)
 8000946:	f001 fd45 	bl	80023d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <_ZN5Motor9initMotorEv+0x4c>)
 8000952:	f001 fd3f 	bl	80023d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095c:	480a      	ldr	r0, [pc, #40]	; (8000988 <_ZN5Motor9initMotorEv+0x50>)
 800095e:	f001 fd39 	bl	80023d4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);	//< RST_ABC
 8000962:	2201      	movs	r2, #1
 8000964:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000968:	4805      	ldr	r0, [pc, #20]	; (8000980 <_ZN5Motor9initMotorEv+0x48>)
 800096a:	f001 fd33 	bl	80023d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);	//< RC_SHDN_VSS "Break_Resistor"
 800096e:	2201      	movs	r2, #1
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <_ZN5Motor9initMotorEv+0x54>)
 8000974:	f001 fd2e 	bl	80023d4 <HAL_GPIO_WritePin>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40021800 	.word	0x40021800
 8000984:	40020400 	.word	0x40020400
 8000988:	40020800 	.word	0x40020800
 800098c:	40020c00 	.word	0x40020c00

08000990 <_ZN5Motor9getZeroSwEv>:

bool Motor::getZeroSw(void) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	return !(GPIOA->IDR & GPIO_PIN_11);
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <_ZN5Motor9getZeroSwEv+0x28>)
 800099a:	691b      	ldr	r3, [r3, #16]
 800099c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	bf0c      	ite	eq
 80009a4:	2301      	moveq	r3, #1
 80009a6:	2300      	movne	r3, #0
 80009a8:	b2db      	uxtb	r3, r3
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40020000 	.word	0x40020000

080009bc <_Z41__static_initialization_and_destruction_0ii>:

namespace MotorNs {
Motor motors;
}
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d107      	bne.n	80009dc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d102      	bne.n	80009dc <_Z41__static_initialization_and_destruction_0ii+0x20>
Motor motors;
 80009d6:	4809      	ldr	r0, [pc, #36]	; (80009fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80009d8:	f7ff fe82 	bl	80006e0 <_ZN5MotorC1Ev>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d107      	bne.n	80009f2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d102      	bne.n	80009f2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80009ec:	4803      	ldr	r0, [pc, #12]	; (80009fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80009ee:	f7ff ff83 	bl	80008f8 <_ZN5MotorD1Ev>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000090 	.word	0x20000090

08000a00 <_GLOBAL__sub_I__ZN5MotorC2Ev>:
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff ffd7 	bl	80009bc <_Z41__static_initialization_and_destruction_0ii>
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <_GLOBAL__sub_D__ZN5MotorC2Ev>:
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff ffcf 	bl	80009bc <_Z41__static_initialization_and_destruction_0ii>
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b25a      	sxtb	r2, r3
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	4013      	ands	r3, r2
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
  }
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <_ZN12SysTickTimer7getTimeEv>:

	/**
	 * \brief Returns the actual system time
	 * \retval time - the actual time value in ms
	 */
	uint32_t getTime(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	2305      	movs	r3, #5
 8000a52:	73fb      	strb	r3, [r7, #15]
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
	memory_order __b = __m & __memory_order_mask;
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ffe0 	bl	8000a20 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8000a60:	4603      	mov	r3, r0
 8000a62:	73bb      	strb	r3, [r7, #14]
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <_ZN12SysTickTimer7getTimeEv+0x34>)
 8000a66:	f3bf 8f5b 	dmb	ish
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f3bf 8f5b 	dmb	ish
 8000a70:	bf00      	nop
		return time.load();
	}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2000009c 	.word	0x2000009c

08000a80 <_ZN9PowerCtrlC1Ev>:
 *      Author: tiwo
 */

#include "PowerCtrl.h"

PowerCtrl::PowerCtrl() {
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <_ZN9PowerCtrlC1Ev+0x1c>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	601a      	str	r2, [r3, #0]

}
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	08004364 	.word	0x08004364

08000aa0 <_ZN9PowerCtrlD1Ev>:

PowerCtrl::~PowerCtrl() {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	4a04      	ldr	r2, [pc, #16]	; (8000abc <_ZN9PowerCtrlD1Ev+0x1c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	08004364 	.word	0x08004364

08000ac0 <_ZN9PowerCtrlD0Ev>:
PowerCtrl::~PowerCtrl() {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
}
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ffe9 	bl	8000aa0 <_ZN9PowerCtrlD1Ev>
 8000ace:	2104      	movs	r1, #4
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f003 fb91 	bl	80041f8 <_ZdlPvj>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_ZN9PowerCtrl11setVCCPowerEb>:
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}

bool PowerCtrl::setVCCPower(bool state) {
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_SET);	// SHDN set '1'
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af2:	480f      	ldr	r0, [pc, #60]	; (8000b30 <_ZN9PowerCtrl11setVCCPowerEb+0x50>)
 8000af4:	f001 fc6e 	bl	80023d4 <HAL_GPIO_WritePin>

	uint32_t actTime = Timers::Systick::tim.getTime(); // store actual time
 8000af8:	480e      	ldr	r0, [pc, #56]	; (8000b34 <_ZN9PowerCtrl11setVCCPowerEb+0x54>)
 8000afa:	f7ff ffa5 	bl	8000a48 <_ZN12SysTickTimer7getTimeEv>
 8000afe:	60f8      	str	r0, [r7, #12]

	while (actTime + 5000 > Timers::Systick::tim.getTime()) {
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f503 549c 	add.w	r4, r3, #4992	; 0x1380
 8000b06:	3408      	adds	r4, #8
 8000b08:	480a      	ldr	r0, [pc, #40]	; (8000b34 <_ZN9PowerCtrl11setVCCPowerEb+0x54>)
 8000b0a:	f7ff ff9d 	bl	8000a48 <_ZN12SysTickTimer7getTimeEv>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	429c      	cmp	r4, r3
 8000b12:	bf8c      	ite	hi
 8000b14:	2301      	movhi	r3, #1
 8000b16:	2300      	movls	r3, #0
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d000      	beq.n	8000b20 <_ZN9PowerCtrl11setVCCPowerEb+0x40>
 8000b1e:	e7ef      	b.n	8000b00 <_ZN9PowerCtrl11setVCCPowerEb+0x20>
		// waiting for power above Vcc-0.7V
		// or timeout after 2 seconds
	}
	return getEN_VCC();
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f000 f809 	bl	8000b38 <_ZN9PowerCtrl9getEN_VCCEv>
 8000b26:	4603      	mov	r3, r0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	40021800 	.word	0x40021800
 8000b34:	20000098 	.word	0x20000098

08000b38 <_ZN9PowerCtrl9getEN_VCCEv>:

bool PowerCtrl::getEN_VCC(void) {
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	return GPIOD->IDR & GPIO_PIN_0;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <_ZN9PowerCtrl9getEN_VCCEv+0x28>)
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf14      	ite	ne
 8000b4c:	2301      	movne	r3, #1
 8000b4e:	2300      	moveq	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <_Z41__static_initialization_and_destruction_0ii>:

namespace PowerNs {
PowerCtrl power;
}
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d107      	bne.n	8000b84 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d102      	bne.n	8000b84 <_Z41__static_initialization_and_destruction_0ii+0x20>
PowerCtrl power;
 8000b7e:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000b80:	f7ff ff7e 	bl	8000a80 <_ZN9PowerCtrlC1Ev>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d107      	bne.n	8000b9a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d102      	bne.n	8000b9a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000b96:	f7ff ff83 	bl	8000aa0 <_ZN9PowerCtrlD1Ev>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000094 	.word	0x20000094

08000ba8 <_GLOBAL__sub_I__ZN9PowerCtrlC2Ev>:
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f7ff ffd7 	bl	8000b64 <_Z41__static_initialization_and_destruction_0ii>
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_GLOBAL__sub_D__ZN9PowerCtrlC2Ev>:
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff ffcf 	bl	8000b64 <_Z41__static_initialization_and_destruction_0ii>
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <_ZNVKSt6atomicIbEcvbEv>:
    { return _M_base.operator=(__i); }

    operator bool() const noexcept
    { return _M_base.load(); }

    operator bool() const volatile noexcept
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    { return _M_base.load(); }
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	2305      	movs	r3, #5
 8000bd6:	72fb      	strb	r3, [r7, #11]
	memory_order __b = __m & __memory_order_mask;
 8000bd8:	7afb      	ldrb	r3, [r7, #11]
 8000bda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff1e 	bl	8000a20 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8000be4:	4603      	mov	r3, r0
 8000be6:	72bb      	strb	r3, [r7, #10]
	return __atomic_load_n(&_M_i, int(__m));
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f3bf 8f5b 	dmb	ish
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	f3bf 8f5b 	dmb	ish
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf14      	ite	ne
 8000bfa:	2301      	movne	r3, #1
 8000bfc:	2300      	moveq	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <_ZNVSt6atomicIbE5storeEbSt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
    { _M_base.store(__i, __m); }

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
 8000c14:	4613      	mov	r3, r2
 8000c16:	70bb      	strb	r3, [r7, #2]
    { _M_base.store(__i, __m); }
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	72fb      	strb	r3, [r7, #11]
 8000c20:	78bb      	ldrb	r3, [r7, #2]
 8000c22:	72bb      	strb	r3, [r7, #10]
	memory_order __b = __m & __memory_order_mask;
 8000c24:	7abb      	ldrb	r3, [r7, #10]
 8000c26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fef8 	bl	8000a20 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8000c30:	4603      	mov	r3, r0
 8000c32:	727b      	strb	r3, [r7, #9]
	__atomic_store_n(&_M_i, __i, int(__m));
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	7afa      	ldrb	r2, [r7, #11]
 8000c38:	f3bf 8f5b 	dmb	ish
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	f3bf 8f5b 	dmb	ish
      }
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb0:	d301      	bcc.n	8000cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00f      	b.n	8000cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <SysTick_Config+0x40>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc4:	f7ff ffc2 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SysTick_Config+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <SysTick_Config+0x40>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <_ZN12SysTickTimer4tickEv>:

	/**
	 * \brief Updates the actual timer value and checks for an overrun of the
	 *        Sample Period
	 */
	static void tick(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	2305      	movs	r3, #5
 8000cec:	707b      	strb	r3, [r7, #1]
	memory_order __b = __m & __memory_order_mask;
 8000cee:	787b      	ldrb	r3, [r7, #1]
 8000cf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fe93 	bl	8000a20 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	703b      	strb	r3, [r7, #0]
	return __atomic_load_n(&_M_i, int(__m));
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <_ZN12SysTickTimer4tickEv+0x7c>)
 8000d00:	f3bf 8f5b 	dmb	ish
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f3bf 8f5b 	dmb	ish
 8000d0a:	bf00      	nop
		time.store(Timers::Systick::SYSTEMTICK_PERIOD_MS + time.load());
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	2305      	movs	r3, #5
 8000d12:	70fb      	strb	r3, [r7, #3]
	memory_order __b = __m & __memory_order_mask;
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fe80 	bl	8000a20 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8000d20:	4603      	mov	r3, r0
 8000d22:	70bb      	strb	r3, [r7, #2]
	__atomic_store_n(&_M_i, __i, int(__m));
 8000d24:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <_ZN12SysTickTimer4tickEv+0x7c>)
 8000d26:	f3bf 8f5b 	dmb	ish
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	f3bf 8f5b 	dmb	ish
      }
 8000d32:	bf00      	nop
		// reset_switch hasn't been called since last
		// system tick => timing problem occurred
		if (reset_switch) {
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <_ZN12SysTickTimer4tickEv+0x80>)
 8000d36:	f7ff ff47 	bl	8000bc8 <_ZNVKSt6atomicIbEcvbEv>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d005      	beq.n	8000d4c <_ZN12SysTickTimer4tickEv+0x68>
			timer_overrun.store(true);
 8000d40:	2205      	movs	r2, #5
 8000d42:	2101      	movs	r1, #1
 8000d44:	4808      	ldr	r0, [pc, #32]	; (8000d68 <_ZN12SysTickTimer4tickEv+0x84>)
 8000d46:	f7ff ff5f 	bl	8000c08 <_ZNVSt6atomicIbE5storeEbSt12memory_order>
		} else {
			reset_switch.store(true);
		}
	}
 8000d4a:	e004      	b.n	8000d56 <_ZN12SysTickTimer4tickEv+0x72>
			reset_switch.store(true);
 8000d4c:	2205      	movs	r2, #5
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <_ZN12SysTickTimer4tickEv+0x80>)
 8000d52:	f7ff ff59 	bl	8000c08 <_ZNVSt6atomicIbE5storeEbSt12memory_order>
	}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000009c 	.word	0x2000009c
 8000d64:	200000a4 	.word	0x200000a4
 8000d68:	200000a0 	.word	0x200000a0

08000d6c <_ZN12SysTickTimerC1Ev>:

  reset_switch.store(false);  // reset flag which is probably set
  timer_overrun.store(false); // reset flag which is probably set
}

SysTickTimer::SysTickTimer() {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <_ZN12SysTickTimerC1Ev+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
	SysTick_Config(HAL_RCC_GetSysClockFreq() / Timers::Systick::FREQUENCY_HZ);
 8000d7a:	f001 fea3 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <_ZN12SysTickTimerC1Ev+0x30>)
 8000d82:	fba2 2303 	umull	r2, r3, r2, r3
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff89 	bl	8000ca0 <SysTick_Config>
}
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	08004374 	.word	0x08004374
 8000d9c:	10624dd3 	.word	0x10624dd3

08000da0 <_ZN12SysTickTimerD1Ev>:

SysTickTimer::~SysTickTimer() {
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <_ZN12SysTickTimerD1Ev+0x1c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	08004374 	.word	0x08004374

08000dc0 <_ZN12SysTickTimerD0Ev>:
SysTickTimer::~SysTickTimer() {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
}
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ffe9 	bl	8000da0 <_ZN12SysTickTimerD1Ev>
 8000dce:	2104      	movs	r1, #4
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f003 fa11 	bl	80041f8 <_ZdlPvj>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <SysTick_Handler>:

void SysTick_Handler(void){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	//LEDns::led.led_on(LED_YELLOW);
	SysTickTimer::tick();
 8000de4:	f7ff ff7e 	bl	8000ce4 <_ZN12SysTickTimer4tickEv>
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <_Z41__static_initialization_and_destruction_0ii>:
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d107      	bne.n	8000e0c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d102      	bne.n	8000e0c <_Z41__static_initialization_and_destruction_0ii+0x20>
SysTickTimer tim;
 8000e06:	4809      	ldr	r0, [pc, #36]	; (8000e2c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000e08:	f7ff ffb0 	bl	8000d6c <_ZN12SysTickTimerC1Ev>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d107      	bne.n	8000e22 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d102      	bne.n	8000e22 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000e1e:	f7ff ffbf 	bl	8000da0 <_ZN12SysTickTimerD1Ev>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000098 	.word	0x20000098

08000e30 <_GLOBAL__sub_I__ZN6Timers7Systick3TimE>:
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff ffd7 	bl	8000dec <_Z41__static_initialization_and_destruction_0ii>
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_GLOBAL__sub_D__ZN6Timers7Systick3TimE>:
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff ffcf 	bl	8000dec <_Z41__static_initialization_and_destruction_0ii>
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_ZNVKSt6atomicIbE4loadESt12memory_order>:
    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
    { return _M_base.load(__m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const volatile noexcept
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
    { return _M_base.load(__m); }
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	72fb      	strb	r3, [r7, #11]
	memory_order __b = __m & __memory_order_mask;
 8000e64:	7afb      	ldrb	r3, [r7, #11]
 8000e66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fdd8 	bl	8000a20 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8000e70:	4603      	mov	r3, r0
 8000e72:	72bb      	strb	r3, [r7, #10]
	return __atomic_load_n(&_M_i, int(__m));
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f3bf 8f5b 	dmb	ish
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	f3bf 8f5b 	dmb	ish
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	bf14      	ite	ne
 8000e86:	2301      	movne	r3, #1
 8000e88:	2300      	moveq	r3, #0
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_ZN6Timers5MotorL7setPWMAEhh>:
static constexpr uint32_t FREQUENCY_HZ = 1000 / FREQ_DIV; //! System Tick Frequency
static constexpr uint32_t SYSTEMTICK_PERIOD_MS = 1000 / FREQUENCY_HZ; //! 1000 ticks / Hz = ms
}

namespace Motor {
static inline void setPWMA(uint8_t pwm1, uint8_t pwm2) {
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	71bb      	strb	r3, [r7, #6]
	htim4.Instance->CCR3 = pwm1;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <_ZN6Timers5MotorL7setPWMAEhh+0x2c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	79fa      	ldrb	r2, [r7, #7]
 8000eaa:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = pwm2;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <_ZN6Timers5MotorL7setPWMAEhh+0x2c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	79ba      	ldrb	r2, [r7, #6]
 8000eb2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	20000138 	.word	0x20000138

08000ec4 <_ZN12SysTickTimer5startEv>:
	void start(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	2305      	movs	r3, #5
 8000ed2:	72fb      	strb	r3, [r7, #11]
	memory_order __b = __m & __memory_order_mask;
 8000ed4:	7afb      	ldrb	r3, [r7, #11]
 8000ed6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fda0 	bl	8000a20 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	72bb      	strb	r3, [r7, #10]
	__atomic_store_n(&_M_i, __i, int(__m));
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <_ZN12SysTickTimer5startEv+0x4c>)
 8000ee6:	f3bf 8f5b 	dmb	ish
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	f3bf 8f5b 	dmb	ish
      }
 8000ef2:	bf00      	nop
		timer_overrun.store(false);
 8000ef4:	2205      	movs	r2, #5
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4806      	ldr	r0, [pc, #24]	; (8000f14 <_ZN12SysTickTimer5startEv+0x50>)
 8000efa:	f7ff fe85 	bl	8000c08 <_ZNVSt6atomicIbE5storeEbSt12memory_order>
		reset_switch.store(false);
 8000efe:	2205      	movs	r2, #5
 8000f00:	2100      	movs	r1, #0
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <_ZN12SysTickTimer5startEv+0x54>)
 8000f04:	f7ff fe80 	bl	8000c08 <_ZNVSt6atomicIbE5storeEbSt12memory_order>
	}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000009c 	.word	0x2000009c
 8000f14:	200000a0 	.word	0x200000a0
 8000f18:	200000a4 	.word	0x200000a4

08000f1c <_ZN12SysTickTimer9isSysTickEv>:
	bool isSysTick(void) {
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
		return (reset_switch.load() & !timer_overrun.load());
 8000f24:	2105      	movs	r1, #5
 8000f26:	480b      	ldr	r0, [pc, #44]	; (8000f54 <_ZN12SysTickTimer9isSysTickEv+0x38>)
 8000f28:	f7ff ff92 	bl	8000e50 <_ZNVKSt6atomicIbE4loadESt12memory_order>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461c      	mov	r4, r3
 8000f30:	2105      	movs	r1, #5
 8000f32:	4809      	ldr	r0, [pc, #36]	; (8000f58 <_ZN12SysTickTimer9isSysTickEv+0x3c>)
 8000f34:	f7ff ff8c 	bl	8000e50 <_ZNVKSt6atomicIbE4loadESt12memory_order>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f083 0301 	eor.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4023      	ands	r3, r4
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bf14      	ite	ne
 8000f46:	2301      	movne	r3, #1
 8000f48:	2300      	moveq	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
	}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd90      	pop	{r4, r7, pc}
 8000f54:	200000a4 	.word	0x200000a4
 8000f58:	200000a0 	.word	0x200000a0

08000f5c <_ZN12SysTickTimer18resetTimingControlEv>:
	void resetTimingControl(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
		if (!timer_overrun.load()) {
 8000f64:	2105      	movs	r1, #5
 8000f66:	4809      	ldr	r0, [pc, #36]	; (8000f8c <_ZN12SysTickTimer18resetTimingControlEv+0x30>)
 8000f68:	f7ff ff72 	bl	8000e50 <_ZNVKSt6atomicIbE4loadESt12memory_order>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f083 0301 	eor.w	r3, r3, #1
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d004      	beq.n	8000f82 <_ZN12SysTickTimer18resetTimingControlEv+0x26>
			reset_switch.store(false);
 8000f78:	2205      	movs	r2, #5
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <_ZN12SysTickTimer18resetTimingControlEv+0x34>)
 8000f7e:	f7ff fe43 	bl	8000c08 <_ZNVSt6atomicIbE5storeEbSt12memory_order>
	}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200000a0 	.word	0x200000a0
 8000f90:	200000a4 	.word	0x200000a4

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9a:	f000 ff23 	bl	8001de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9e:	f000 f86b 	bl	8001078 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa2:	f000 fbf3 	bl	800178c <_ZL12MX_GPIO_Initv>
  MX_TIM4_Init();
 8000fa6:	f000 f9e1 	bl	800136c <_ZL12MX_TIM4_Initv>
  MX_TIM12_Init();
 8000faa:	f000 fb1f 	bl	80015ec <_ZL13MX_TIM12_Initv>
  MX_TIM1_Init();
 8000fae:	f000 f8d5 	bl	800115c <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8000fb2:	f000 f959 	bl	8001268 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8000fb6:	f000 fa97 	bl	80014e8 <_ZL12MX_TIM5_Initv>
  MX_USART3_UART_Init();
 8000fba:	f000 fbb9 	bl	8001730 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  LEDns::led.led_on(LED_YELLOW);
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	4828      	ldr	r0, [pc, #160]	; (8001064 <main+0xd0>)
 8000fc2:	f7ff fb11 	bl	80005e8 <_ZN3LED6led_onEt>

  if(PowerNs::power.setVCCPower(PowerNs::powerOn)) LEDns::led.led_on(LED_GREEN);
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4827      	ldr	r0, [pc, #156]	; (8001068 <main+0xd4>)
 8000fca:	f7ff fd89 	bl	8000ae0 <_ZN9PowerCtrl11setVCCPowerEb>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <main+0x4a>
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	4823      	ldr	r0, [pc, #140]	; (8001064 <main+0xd0>)
 8000fd8:	f7ff fb06 	bl	80005e8 <_ZN3LED6led_onEt>
 8000fdc:	e003      	b.n	8000fe6 <main+0x52>
  else LEDns::led.led_on(LED_RED);
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	4820      	ldr	r0, [pc, #128]	; (8001064 <main+0xd0>)
 8000fe2:	f7ff fb01 	bl	80005e8 <_ZN3LED6led_onEt>
  LEDns::led.led_off(LED_YELLOW);
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	481e      	ldr	r0, [pc, #120]	; (8001064 <main+0xd0>)
 8000fea:	f7ff fb0f 	bl	800060c <_ZN3LED7led_offEt>
  MotorNs::motors.initMotor();
 8000fee:	481f      	ldr	r0, [pc, #124]	; (800106c <main+0xd8>)
 8000ff0:	f7ff fca2 	bl	8000938 <_ZN5Motor9initMotorEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int cnt = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  Timers::Motor::setPWMA(5, 0);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2005      	movs	r0, #5
 8000ffc:	f7ff ff4a 	bl	8000e94 <_ZN6Timers5MotorL7setPWMAEhh>

  Timers::Systick::tim.start();
 8001000:	481b      	ldr	r0, [pc, #108]	; (8001070 <main+0xdc>)
 8001002:	f7ff ff5f 	bl	8000ec4 <_ZN12SysTickTimer5startEv>

  while (1)
  {
    /* USER CODE END WHILE */
	  if(Timers::Systick::tim.isSysTick()){
 8001006:	481a      	ldr	r0, [pc, #104]	; (8001070 <main+0xdc>)
 8001008:	f7ff ff88 	bl	8000f1c <_ZN12SysTickTimer9isSysTickEv>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f9      	beq.n	8001006 <main+0x72>

		  if(MotorNs::motors.getZeroSw()) LEDns::led.led_on(LED_RED);
 8001012:	4816      	ldr	r0, [pc, #88]	; (800106c <main+0xd8>)
 8001014:	f7ff fcbc 	bl	8000990 <_ZN5Motor9getZeroSwEv>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <main+0x94>
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <main+0xd0>)
 8001022:	f7ff fae1 	bl	80005e8 <_ZN3LED6led_onEt>
 8001026:	e003      	b.n	8001030 <main+0x9c>
		  else LEDns::led.led_off(LED_RED);
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <main+0xd0>)
 800102c:	f7ff faee 	bl	800060c <_ZN3LED7led_offEt>

		  cnt++;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3301      	adds	r3, #1
 8001034:	607b      	str	r3, [r7, #4]
		  if(cnt%1000 == 0){
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <main+0xe0>)
 800103a:	fb83 1302 	smull	r1, r3, r3, r2
 800103e:	1199      	asrs	r1, r3, #6
 8001040:	17d3      	asrs	r3, r2, #31
 8001042:	1acb      	subs	r3, r1, r3
 8001044:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001048:	fb01 f303 	mul.w	r3, r1, r3
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d103      	bne.n	800105a <main+0xc6>
			  LEDns::led.led_toggle(LED_YELLOW);
 8001052:	2120      	movs	r1, #32
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <main+0xd0>)
 8001056:	f7ff faeb 	bl	8000630 <_ZN3LED10led_toggleEt>
		  }
		  Timers::Systick::tim.resetTimingControl();
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <main+0xdc>)
 800105c:	f7ff ff7e 	bl	8000f5c <_ZN12SysTickTimer18resetTimingControlEv>
	  if(Timers::Systick::tim.isSysTick()){
 8001060:	e7d1      	b.n	8001006 <main+0x72>
 8001062:	bf00      	nop
 8001064:	2000008c 	.word	0x2000008c
 8001068:	20000094 	.word	0x20000094
 800106c:	20000090 	.word	0x20000090
 8001070:	20000098 	.word	0x20000098
 8001074:	10624dd3 	.word	0x10624dd3

08001078 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2230      	movs	r2, #48	; 0x30
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f003 f8e6 	bl	8004258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <_Z18SystemClock_Configv+0xdc>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <_Z18SystemClock_Configv+0xdc>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <_Z18SystemClock_Configv+0xdc>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <_Z18SystemClock_Configv+0xe0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a25      	ldr	r2, [pc, #148]	; (8001158 <_Z18SystemClock_Configv+0xe0>)
 80010c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <_Z18SystemClock_Configv+0xe0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d4:	2302      	movs	r3, #2
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d8:	2301      	movs	r3, #1
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010dc:	2310      	movs	r3, #16
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e0:	2302      	movs	r3, #2
 80010e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e4:	2300      	movs	r3, #0
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010e8:	2308      	movs	r3, #8
 80010ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010f0:	2304      	movs	r3, #4
 80010f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010f4:	2304      	movs	r3, #4
 80010f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 f983 	bl	8002408 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	bf14      	ite	ne
 8001108:	2301      	movne	r3, #1
 800110a:	2300      	moveq	r3, #0
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001112:	f000 fc3f 	bl	8001994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2302      	movs	r3, #2
 800111c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f001 fbe0 	bl	80028f8 <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	bf14      	ite	ne
 800113e:	2301      	movne	r3, #1
 8001140:	2300      	moveq	r3, #0
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001148:	f000 fc24 	bl	8001994 <Error_Handler>
  }
}
 800114c:	bf00      	nop
 800114e:	3750      	adds	r7, #80	; 0x50
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	40007000 	.word	0x40007000

0800115c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001178:	4b39      	ldr	r3, [pc, #228]	; (8001260 <_ZL12MX_TIM1_Initv+0x104>)
 800117a:	4a3a      	ldr	r2, [pc, #232]	; (8001264 <_ZL12MX_TIM1_Initv+0x108>)
 800117c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800117e:	4b38      	ldr	r3, [pc, #224]	; (8001260 <_ZL12MX_TIM1_Initv+0x104>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b36      	ldr	r3, [pc, #216]	; (8001260 <_ZL12MX_TIM1_Initv+0x104>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800118a:	4b35      	ldr	r3, [pc, #212]	; (8001260 <_ZL12MX_TIM1_Initv+0x104>)
 800118c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001190:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001192:	4b33      	ldr	r3, [pc, #204]	; (8001260 <_ZL12MX_TIM1_Initv+0x104>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001198:	4b31      	ldr	r3, [pc, #196]	; (8001260 <_ZL12MX_TIM1_Initv+0x104>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b30      	ldr	r3, [pc, #192]	; (8001260 <_ZL12MX_TIM1_Initv+0x104>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80011a4:	482e      	ldr	r0, [pc, #184]	; (8001260 <_ZL12MX_TIM1_Initv+0x104>)
 80011a6:	f001 fe4b 	bl	8002e40 <HAL_TIM_IC_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf14      	ite	ne
 80011b0:	2301      	movne	r3, #1
 80011b2:	2300      	moveq	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 80011ba:	f000 fbeb 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	4619      	mov	r1, r3
 80011cc:	4824      	ldr	r0, [pc, #144]	; (8001260 <_ZL12MX_TIM1_Initv+0x104>)
 80011ce:	f002 fd81 	bl	8003cd4 <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	bf14      	ite	ne
 80011d8:	2301      	movne	r3, #1
 80011da:	2300      	moveq	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 80011e2:	f000 fbd7 	bl	8001994 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011ea:	2301      	movs	r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	4818      	ldr	r0, [pc, #96]	; (8001260 <_ZL12MX_TIM1_Initv+0x104>)
 80011fe:	f001 fe6e 	bl	8002ede <HAL_TIM_IC_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf14      	ite	ne
 8001208:	2301      	movne	r3, #1
 800120a:	2300      	moveq	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <_ZL12MX_TIM1_Initv+0xba>
  {
    Error_Handler();
 8001212:	f000 fbbf 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	2204      	movs	r2, #4
 800121a:	4619      	mov	r1, r3
 800121c:	4810      	ldr	r0, [pc, #64]	; (8001260 <_ZL12MX_TIM1_Initv+0x104>)
 800121e:	f001 fe5e 	bl	8002ede <HAL_TIM_IC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 8001232:	f000 fbaf 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	2208      	movs	r2, #8
 800123a:	4619      	mov	r1, r3
 800123c:	4808      	ldr	r0, [pc, #32]	; (8001260 <_ZL12MX_TIM1_Initv+0x104>)
 800123e:	f001 fe4e 	bl	8002ede <HAL_TIM_IC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <_ZL12MX_TIM1_Initv+0xfa>
  {
    Error_Handler();
 8001252:	f000 fb9f 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200000a8 	.word	0x200000a8
 8001264:	40010000 	.word	0x40010000

08001268 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001284:	4b37      	ldr	r3, [pc, #220]	; (8001364 <_ZL12MX_TIM3_Initv+0xfc>)
 8001286:	4a38      	ldr	r2, [pc, #224]	; (8001368 <_ZL12MX_TIM3_Initv+0x100>)
 8001288:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800128a:	4b36      	ldr	r3, [pc, #216]	; (8001364 <_ZL12MX_TIM3_Initv+0xfc>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b34      	ldr	r3, [pc, #208]	; (8001364 <_ZL12MX_TIM3_Initv+0xfc>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001296:	4b33      	ldr	r3, [pc, #204]	; (8001364 <_ZL12MX_TIM3_Initv+0xfc>)
 8001298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b31      	ldr	r3, [pc, #196]	; (8001364 <_ZL12MX_TIM3_Initv+0xfc>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <_ZL12MX_TIM3_Initv+0xfc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012aa:	482e      	ldr	r0, [pc, #184]	; (8001364 <_ZL12MX_TIM3_Initv+0xfc>)
 80012ac:	f001 fdc8 	bl	8002e40 <HAL_TIM_IC_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 80012c0:	f000 fb68 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	4824      	ldr	r0, [pc, #144]	; (8001364 <_ZL12MX_TIM3_Initv+0xfc>)
 80012d4:	f002 fcfe 	bl	8003cd4 <HAL_TIMEx_MasterConfigSynchronization>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf14      	ite	ne
 80012de:	2301      	movne	r3, #1
 80012e0:	2300      	moveq	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 80012e8:	f000 fb54 	bl	8001994 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012ec:	2300      	movs	r3, #0
 80012ee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012f0:	2301      	movs	r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	4619      	mov	r1, r3
 8001302:	4818      	ldr	r0, [pc, #96]	; (8001364 <_ZL12MX_TIM3_Initv+0xfc>)
 8001304:	f001 fdeb 	bl	8002ede <HAL_TIM_IC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <_ZL12MX_TIM3_Initv+0xb4>
  {
    Error_Handler();
 8001318:	f000 fb3c 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	2204      	movs	r2, #4
 8001320:	4619      	mov	r1, r3
 8001322:	4810      	ldr	r0, [pc, #64]	; (8001364 <_ZL12MX_TIM3_Initv+0xfc>)
 8001324:	f001 fddb 	bl	8002ede <HAL_TIM_IC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf14      	ite	ne
 800132e:	2301      	movne	r3, #1
 8001330:	2300      	moveq	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <_ZL12MX_TIM3_Initv+0xd4>
  {
    Error_Handler();
 8001338:	f000 fb2c 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	2208      	movs	r2, #8
 8001340:	4619      	mov	r1, r3
 8001342:	4808      	ldr	r0, [pc, #32]	; (8001364 <_ZL12MX_TIM3_Initv+0xfc>)
 8001344:	f001 fdcb 	bl	8002ede <HAL_TIM_IC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	bf14      	ite	ne
 800134e:	2301      	movne	r3, #1
 8001350:	2300      	moveq	r3, #0
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <_ZL12MX_TIM3_Initv+0xf4>
  {
    Error_Handler();
 8001358:	f000 fb1c 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200000f0 	.word	0x200000f0
 8001368:	40000400 	.word	0x40000400

0800136c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08e      	sub	sp, #56	; 0x38
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800139c:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 800139e:	4a51      	ldr	r2, [pc, #324]	; (80014e4 <_ZL12MX_TIM4_Initv+0x178>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72;
 80013a2:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 80013a4:	2248      	movs	r2, #72	; 0x48
 80013a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80013ae:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 80013b0:	2263      	movs	r2, #99	; 0x63
 80013b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013c0:	4847      	ldr	r0, [pc, #284]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 80013c2:	f001 fc95 	bl	8002cf0 <HAL_TIM_Base_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf14      	ite	ne
 80013cc:	2301      	movne	r3, #1
 80013ce:	2300      	moveq	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <_ZL12MX_TIM4_Initv+0x6e>
  {
    Error_Handler();
 80013d6:	f000 fadd 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e4:	4619      	mov	r1, r3
 80013e6:	483e      	ldr	r0, [pc, #248]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 80013e8:	f001 fecc 	bl	8003184 <HAL_TIM_ConfigClockSource>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	bf14      	ite	ne
 80013f2:	2301      	movne	r3, #1
 80013f4:	2300      	moveq	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <_ZL12MX_TIM4_Initv+0x94>
  {
    Error_Handler();
 80013fc:	f000 faca 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001400:	4837      	ldr	r0, [pc, #220]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 8001402:	f001 fcc4 	bl	8002d8e <HAL_TIM_PWM_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf14      	ite	ne
 800140c:	2301      	movne	r3, #1
 800140e:	2300      	moveq	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 8001416:	f000 fabd 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 800141a:	2330      	movs	r3, #48	; 0x30
 800141c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	4619      	mov	r1, r3
 8001428:	482d      	ldr	r0, [pc, #180]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 800142a:	f002 fc53 	bl	8003cd4 <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf14      	ite	ne
 8001434:	2301      	movne	r3, #1
 8001436:	2300      	moveq	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <_ZL12MX_TIM4_Initv+0xd6>
  {
    Error_Handler();
 800143e:	f000 faa9 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001442:	2360      	movs	r3, #96	; 0x60
 8001444:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	4821      	ldr	r0, [pc, #132]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 800145a:	f001 fdd5 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <_ZL12MX_TIM4_Initv+0x106>
  {
    Error_Handler();
 800146e:	f000 fa91 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2204      	movs	r2, #4
 8001476:	4619      	mov	r1, r3
 8001478:	4819      	ldr	r0, [pc, #100]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 800147a:	f001 fdc5 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf14      	ite	ne
 8001484:	2301      	movne	r3, #1
 8001486:	2300      	moveq	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <_ZL12MX_TIM4_Initv+0x126>
  {
    Error_Handler();
 800148e:	f000 fa81 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2208      	movs	r2, #8
 8001496:	4619      	mov	r1, r3
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 800149a:	f001 fdb5 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf14      	ite	ne
 80014a4:	2301      	movne	r3, #1
 80014a6:	2300      	moveq	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <_ZL12MX_TIM4_Initv+0x146>
  {
    Error_Handler();
 80014ae:	f000 fa71 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	220c      	movs	r2, #12
 80014b6:	4619      	mov	r1, r3
 80014b8:	4809      	ldr	r0, [pc, #36]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 80014ba:	f001 fda5 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf14      	ite	ne
 80014c4:	2301      	movne	r3, #1
 80014c6:	2300      	moveq	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <_ZL12MX_TIM4_Initv+0x166>
  {
    Error_Handler();
 80014ce:	f000 fa61 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014d2:	4803      	ldr	r0, [pc, #12]	; (80014e0 <_ZL12MX_TIM4_Initv+0x174>)
 80014d4:	f000 fb7a 	bl	8001bcc <HAL_TIM_MspPostInit>

}
 80014d8:	bf00      	nop
 80014da:	3738      	adds	r7, #56	; 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000138 	.word	0x20000138
 80014e4:	40000800 	.word	0x40000800

080014e8 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014f8:	463b      	mov	r3, r7
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001504:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <_ZL12MX_TIM5_Initv+0xfc>)
 8001506:	4a38      	ldr	r2, [pc, #224]	; (80015e8 <_ZL12MX_TIM5_Initv+0x100>)
 8001508:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <_ZL12MX_TIM5_Initv+0xfc>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001510:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <_ZL12MX_TIM5_Initv+0xfc>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0x0000ffff;
 8001516:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <_ZL12MX_TIM5_Initv+0xfc>)
 8001518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800151c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151e:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <_ZL12MX_TIM5_Initv+0xfc>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001524:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <_ZL12MX_TIM5_Initv+0xfc>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800152a:	482e      	ldr	r0, [pc, #184]	; (80015e4 <_ZL12MX_TIM5_Initv+0xfc>)
 800152c:	f001 fc88 	bl	8002e40 <HAL_TIM_IC_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	bf14      	ite	ne
 8001536:	2301      	movne	r3, #1
 8001538:	2300      	moveq	r3, #0
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <_ZL12MX_TIM5_Initv+0x5c>
  {
    Error_Handler();
 8001540:	f000 fa28 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4619      	mov	r1, r3
 8001552:	4824      	ldr	r0, [pc, #144]	; (80015e4 <_ZL12MX_TIM5_Initv+0xfc>)
 8001554:	f002 fbbe 	bl	8003cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	bf14      	ite	ne
 800155e:	2301      	movne	r3, #1
 8001560:	2300      	moveq	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <_ZL12MX_TIM5_Initv+0x84>
  {
    Error_Handler();
 8001568:	f000 fa14 	bl	8001994 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800156c:	2300      	movs	r3, #0
 800156e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001570:	2301      	movs	r3, #1
 8001572:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	4818      	ldr	r0, [pc, #96]	; (80015e4 <_ZL12MX_TIM5_Initv+0xfc>)
 8001584:	f001 fcab 	bl	8002ede <HAL_TIM_IC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf14      	ite	ne
 800158e:	2301      	movne	r3, #1
 8001590:	2300      	moveq	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <_ZL12MX_TIM5_Initv+0xb4>
  {
    Error_Handler();
 8001598:	f000 f9fc 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800159c:	463b      	mov	r3, r7
 800159e:	2204      	movs	r2, #4
 80015a0:	4619      	mov	r1, r3
 80015a2:	4810      	ldr	r0, [pc, #64]	; (80015e4 <_ZL12MX_TIM5_Initv+0xfc>)
 80015a4:	f001 fc9b 	bl	8002ede <HAL_TIM_IC_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf14      	ite	ne
 80015ae:	2301      	movne	r3, #1
 80015b0:	2300      	moveq	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <_ZL12MX_TIM5_Initv+0xd4>
  {
    Error_Handler();
 80015b8:	f000 f9ec 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	2208      	movs	r2, #8
 80015c0:	4619      	mov	r1, r3
 80015c2:	4808      	ldr	r0, [pc, #32]	; (80015e4 <_ZL12MX_TIM5_Initv+0xfc>)
 80015c4:	f001 fc8b 	bl	8002ede <HAL_TIM_IC_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf14      	ite	ne
 80015ce:	2301      	movne	r3, #1
 80015d0:	2300      	moveq	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <_ZL12MX_TIM5_Initv+0xf4>
  {
    Error_Handler();
 80015d8:	f000 f9dc 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000180 	.word	0x20000180
 80015e8:	40000c00 	.word	0x40000c00

080015ec <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b090      	sub	sp, #64	; 0x40
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
 800161e:	615a      	str	r2, [r3, #20]
 8001620:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001622:	4b41      	ldr	r3, [pc, #260]	; (8001728 <_ZL13MX_TIM12_Initv+0x13c>)
 8001624:	4a41      	ldr	r2, [pc, #260]	; (800172c <_ZL13MX_TIM12_Initv+0x140>)
 8001626:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001628:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <_ZL13MX_TIM12_Initv+0x13c>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b3e      	ldr	r3, [pc, #248]	; (8001728 <_ZL13MX_TIM12_Initv+0x13c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001634:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <_ZL13MX_TIM12_Initv+0x13c>)
 8001636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163c:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <_ZL13MX_TIM12_Initv+0x13c>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b39      	ldr	r3, [pc, #228]	; (8001728 <_ZL13MX_TIM12_Initv+0x13c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001648:	4837      	ldr	r0, [pc, #220]	; (8001728 <_ZL13MX_TIM12_Initv+0x13c>)
 800164a:	f001 fb51 	bl	8002cf0 <HAL_TIM_Base_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf14      	ite	ne
 8001654:	2301      	movne	r3, #1
 8001656:	2300      	moveq	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <_ZL13MX_TIM12_Initv+0x76>
  {
    Error_Handler();
 800165e:	f000 f999 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001668:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800166c:	4619      	mov	r1, r3
 800166e:	482e      	ldr	r0, [pc, #184]	; (8001728 <_ZL13MX_TIM12_Initv+0x13c>)
 8001670:	f001 fd88 	bl	8003184 <HAL_TIM_ConfigClockSource>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	bf14      	ite	ne
 800167a:	2301      	movne	r3, #1
 800167c:	2300      	moveq	r3, #0
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <_ZL13MX_TIM12_Initv+0x9c>
  {
    Error_Handler();
 8001684:	f000 f986 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001688:	4827      	ldr	r0, [pc, #156]	; (8001728 <_ZL13MX_TIM12_Initv+0x13c>)
 800168a:	f001 fb80 	bl	8002d8e <HAL_TIM_PWM_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	bf14      	ite	ne
 8001694:	2301      	movne	r3, #1
 8001696:	2300      	moveq	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <_ZL13MX_TIM12_Initv+0xb6>
  {
    Error_Handler();
 800169e:	f000 f979 	bl	8001994 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80016a2:	2304      	movs	r3, #4
 80016a4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	481d      	ldr	r0, [pc, #116]	; (8001728 <_ZL13MX_TIM12_Initv+0x13c>)
 80016b2:	f001 fe2b 	bl	800330c <HAL_TIM_SlaveConfigSynchro>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf14      	ite	ne
 80016bc:	2301      	movne	r3, #1
 80016be:	2300      	moveq	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <_ZL13MX_TIM12_Initv+0xde>
  {
    Error_Handler();
 80016c6:	f000 f965 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ca:	2360      	movs	r3, #96	; 0x60
 80016cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016da:	463b      	mov	r3, r7
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	4811      	ldr	r0, [pc, #68]	; (8001728 <_ZL13MX_TIM12_Initv+0x13c>)
 80016e2:	f001 fc91 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bf14      	ite	ne
 80016ec:	2301      	movne	r3, #1
 80016ee:	2300      	moveq	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <_ZL13MX_TIM12_Initv+0x10e>
  {
    Error_Handler();
 80016f6:	f000 f94d 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016fa:	463b      	mov	r3, r7
 80016fc:	2204      	movs	r2, #4
 80016fe:	4619      	mov	r1, r3
 8001700:	4809      	ldr	r0, [pc, #36]	; (8001728 <_ZL13MX_TIM12_Initv+0x13c>)
 8001702:	f001 fc81 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf14      	ite	ne
 800170c:	2301      	movne	r3, #1
 800170e:	2300      	moveq	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <_ZL13MX_TIM12_Initv+0x12e>
  {
    Error_Handler();
 8001716:	f000 f93d 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800171a:	4803      	ldr	r0, [pc, #12]	; (8001728 <_ZL13MX_TIM12_Initv+0x13c>)
 800171c:	f000 fa56 	bl	8001bcc <HAL_TIM_MspPostInit>

}
 8001720:	bf00      	nop
 8001722:	3740      	adds	r7, #64	; 0x40
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200001c8 	.word	0x200001c8
 800172c:	40001800 	.word	0x40001800

08001730 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001736:	4a14      	ldr	r2, [pc, #80]	; (8001788 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001738:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <_ZL19MX_USART3_UART_Initv+0x54>)
 800173c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001740:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <_ZL19MX_USART3_UART_Initv+0x54>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001756:	220c      	movs	r2, #12
 8001758:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <_ZL19MX_USART3_UART_Initv+0x54>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001768:	f002 fb30 	bl	8003dcc <HAL_UART_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	bf14      	ite	ne
 8001772:	2301      	movne	r3, #1
 8001774:	2300      	moveq	r3, #0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 800177c:	f000 f90a 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000210 	.word	0x20000210
 8001788:	40004800 	.word	0x40004800

0800178c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	; 0x30
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	4b73      	ldr	r3, [pc, #460]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a72      	ldr	r2, [pc, #456]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b70      	ldr	r3, [pc, #448]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	4b6c      	ldr	r3, [pc, #432]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a6b      	ldr	r2, [pc, #428]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b69      	ldr	r3, [pc, #420]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b65      	ldr	r3, [pc, #404]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a64      	ldr	r2, [pc, #400]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b62      	ldr	r3, [pc, #392]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b5e      	ldr	r3, [pc, #376]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a5d      	ldr	r2, [pc, #372]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 8001800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b5b      	ldr	r3, [pc, #364]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b57      	ldr	r3, [pc, #348]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a56      	ldr	r2, [pc, #344]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b54      	ldr	r3, [pc, #336]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b50      	ldr	r3, [pc, #320]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a4f      	ldr	r2, [pc, #316]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b4d      	ldr	r3, [pc, #308]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	4b49      	ldr	r3, [pc, #292]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a48      	ldr	r2, [pc, #288]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b46      	ldr	r3, [pc, #280]	; (8001974 <_ZL12MX_GPIO_Initv+0x1e8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_14, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 800186c:	4842      	ldr	r0, [pc, #264]	; (8001978 <_ZL12MX_GPIO_Initv+0x1ec>)
 800186e:	f000 fdb1 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	f640 6104 	movw	r1, #3588	; 0xe04
 8001878:	4840      	ldr	r0, [pc, #256]	; (800197c <_ZL12MX_GPIO_Initv+0x1f0>)
 800187a:	f000 fdab 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	483f      	ldr	r0, [pc, #252]	; (8001980 <_ZL12MX_GPIO_Initv+0x1f4>)
 8001884:	f000 fda6 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	21e0      	movs	r1, #224	; 0xe0
 800188c:	483d      	ldr	r0, [pc, #244]	; (8001984 <_ZL12MX_GPIO_Initv+0x1f8>)
 800188e:	f000 fda1 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 8001892:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8001896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	4833      	ldr	r0, [pc, #204]	; (8001978 <_ZL12MX_GPIO_Initv+0x1ec>)
 80018ac:	f000 fbde 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH8 PH13 PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018b0:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	4830      	ldr	r0, [pc, #192]	; (8001988 <_ZL12MX_GPIO_Initv+0x1fc>)
 80018c6:	f000 fbd1 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG9 PG10 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80018ca:	f640 6304 	movw	r3, #3588	; 0xe04
 80018ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	4826      	ldr	r0, [pc, #152]	; (800197c <_ZL12MX_GPIO_Initv+0x1f0>)
 80018e4:	f000 fbc2 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	4619      	mov	r1, r3
 80018fc:	4823      	ldr	r0, [pc, #140]	; (800198c <_ZL12MX_GPIO_Initv+0x200>)
 80018fe:	f000 fbb5 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001902:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	4619      	mov	r1, r3
 8001916:	481e      	ldr	r0, [pc, #120]	; (8001990 <_ZL12MX_GPIO_Initv+0x204>)
 8001918:	f000 fba8 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800191c:	230d      	movs	r3, #13
 800191e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	4814      	ldr	r0, [pc, #80]	; (8001980 <_ZL12MX_GPIO_Initv+0x1f4>)
 8001930:	f000 fb9c 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001938:	2301      	movs	r3, #1
 800193a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <_ZL12MX_GPIO_Initv+0x1f4>)
 800194c:	f000 fb8e 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI5 PI6 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001950:	23e0      	movs	r3, #224	; 0xe0
 8001952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	4807      	ldr	r0, [pc, #28]	; (8001984 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001968:	f000 fb80 	bl	800206c <HAL_GPIO_Init>

}
 800196c:	bf00      	nop
 800196e:	3730      	adds	r7, #48	; 0x30
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	40020400 	.word	0x40020400
 800197c:	40021800 	.word	0x40021800
 8001980:	40020c00 	.word	0x40020c00
 8001984:	40022000 	.word	0x40022000
 8001988:	40021c00 	.word	0x40021c00
 800198c:	40020800 	.word	0x40020800
 8001990:	40020000 	.word	0x40020000

08001994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001998:	b672      	cpsid	i
}
 800199a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800199c:	e7fe      	b.n	800199c <Error_Handler+0x8>
	...

080019a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_MspInit+0x4c>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <HAL_MspInit+0x4c>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_MspInit+0x4c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_MspInit+0x4c>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_MspInit+0x4c>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08e      	sub	sp, #56	; 0x38
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a4c      	ldr	r2, [pc, #304]	; (8001b40 <HAL_TIM_IC_MspInit+0x150>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d12d      	bne.n	8001a6e <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
 8001a16:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a4a      	ldr	r2, [pc, #296]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b48      	ldr	r3, [pc, #288]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	4b44      	ldr	r3, [pc, #272]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a43      	ldr	r2, [pc, #268]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	61fb      	str	r3, [r7, #28]
 8001a48:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001a4a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a64:	4619      	mov	r1, r3
 8001a66:	4838      	ldr	r0, [pc, #224]	; (8001b48 <HAL_TIM_IC_MspInit+0x158>)
 8001a68:	f000 fb00 	bl	800206c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001a6c:	e064      	b.n	8001b38 <HAL_TIM_IC_MspInit+0x148>
  else if(htim_ic->Instance==TIM3)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a36      	ldr	r2, [pc, #216]	; (8001b4c <HAL_TIM_IC_MspInit+0x15c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d12d      	bne.n	8001ad4 <HAL_TIM_IC_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	4a30      	ldr	r2, [pc, #192]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001a82:	f043 0302 	orr.w	r3, r3, #2
 8001a86:	6413      	str	r3, [r2, #64]	; 0x40
 8001a88:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	4a29      	ldr	r2, [pc, #164]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001ab0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aca:	4619      	mov	r1, r3
 8001acc:	4820      	ldr	r0, [pc, #128]	; (8001b50 <HAL_TIM_IC_MspInit+0x160>)
 8001ace:	f000 facd 	bl	800206c <HAL_GPIO_Init>
}
 8001ad2:	e031      	b.n	8001b38 <HAL_TIM_IC_MspInit+0x148>
  else if(htim_ic->Instance==TIM5)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <HAL_TIM_IC_MspInit+0x164>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d12c      	bne.n	8001b38 <HAL_TIM_IC_MspInit+0x148>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001ae8:	f043 0308 	orr.w	r3, r3, #8
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_TIM_IC_MspInit+0x154>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b16:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b30:	4619      	mov	r1, r3
 8001b32:	4809      	ldr	r0, [pc, #36]	; (8001b58 <HAL_TIM_IC_MspInit+0x168>)
 8001b34:	f000 fa9a 	bl	800206c <HAL_GPIO_Init>
}
 8001b38:	bf00      	nop
 8001b3a:	3738      	adds	r7, #56	; 0x38
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40010000 	.word	0x40010000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	40000400 	.word	0x40000400
 8001b50:	40020800 	.word	0x40020800
 8001b54:	40000c00 	.word	0x40000c00
 8001b58:	40021c00 	.word	0x40021c00

08001b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a15      	ldr	r2, [pc, #84]	; (8001bc0 <HAL_TIM_Base_MspInit+0x64>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d10e      	bne.n	8001b8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_TIM_Base_MspInit+0x68>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <HAL_TIM_Base_MspInit+0x68>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <HAL_TIM_Base_MspInit+0x68>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001b8a:	e012      	b.n	8001bb2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM12)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d10d      	bne.n	8001bb2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_TIM_Base_MspInit+0x68>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_TIM_Base_MspInit+0x68>)
 8001ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_TIM_Base_MspInit+0x68>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40000800 	.word	0x40000800
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40001800 	.word	0x40001800

08001bcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a25      	ldr	r2, [pc, #148]	; (8001c80 <HAL_TIM_MspPostInit+0xb4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d11f      	bne.n	8001c2e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <HAL_TIM_MspPostInit+0xb8>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <HAL_TIM_MspPostInit+0xb8>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_TIM_MspPostInit+0xb8>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c0a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	4818      	ldr	r0, [pc, #96]	; (8001c88 <HAL_TIM_MspPostInit+0xbc>)
 8001c28:	f000 fa20 	bl	800206c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001c2c:	e023      	b.n	8001c76 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM12)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <HAL_TIM_MspPostInit+0xc0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d11e      	bne.n	8001c76 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_TIM_MspPostInit+0xb8>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	4a10      	ldr	r2, [pc, #64]	; (8001c84 <HAL_TIM_MspPostInit+0xb8>)
 8001c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c46:	6313      	str	r3, [r2, #48]	; 0x30
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_TIM_MspPostInit+0xb8>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001c54:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001c66:	2309      	movs	r3, #9
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4807      	ldr	r0, [pc, #28]	; (8001c90 <HAL_TIM_MspPostInit+0xc4>)
 8001c72:	f000 f9fb 	bl	800206c <HAL_GPIO_Init>
}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40000800 	.word	0x40000800
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020c00 	.word	0x40020c00
 8001c8c:	40001800 	.word	0x40001800
 8001c90:	40021c00 	.word	0x40021c00

08001c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <HAL_UART_MspInit+0x84>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d12c      	bne.n	8001d10 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_UART_MspInit+0x88>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_UART_MspInit+0x88>)
 8001cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_UART_MspInit+0x88>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_UART_MspInit+0x88>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a10      	ldr	r2, [pc, #64]	; (8001d1c <HAL_UART_MspInit+0x88>)
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_UART_MspInit+0x88>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d00:	2307      	movs	r3, #7
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <HAL_UART_MspInit+0x8c>)
 8001d0c:	f000 f9ae 	bl	800206c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d10:	bf00      	nop
 8001d12:	3728      	adds	r7, #40	; 0x28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40004800 	.word	0x40004800
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020800 	.word	0x40020800

08001d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <NMI_Handler+0x4>

08001d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2e:	e7fe      	b.n	8001d2e <HardFault_Handler+0x4>

08001d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <MemManage_Handler+0x4>

08001d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <BusFault_Handler+0x4>

08001d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <UsageFault_Handler+0x4>

08001d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <SystemInit+0x20>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <SystemInit+0x20>)
 8001d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d94:	480d      	ldr	r0, [pc, #52]	; (8001dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d96:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dac:	4c0b      	ldr	r4, [pc, #44]	; (8001ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dba:	f7ff ffd7 	bl	8001d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f002 fa1f 	bl	8004200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc2:	f7ff f8e7 	bl	8000f94 <main>
  bx  lr    
 8001dc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001dd4:	080043c4 	.word	0x080043c4
  ldr r2, =_sbss
 8001dd8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ddc:	20000268 	.word	0x20000268

08001de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC_IRQHandler>
	...

08001de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <HAL_Init+0x40>)
 8001dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_Init+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <HAL_Init+0x40>)
 8001dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_Init+0x40>)
 8001e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f000 f8f9 	bl	8002004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f000 f808 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e18:	f7ff fdc2 	bl	80019a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023c00 	.word	0x40023c00

08001e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_InitTick+0x54>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0x58>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f903 	bl	8002052 <HAL_SYSTICK_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00e      	b.n	8001e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b0f      	cmp	r3, #15
 8001e5a:	d80a      	bhi.n	8001e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e64:	f000 f8d9 	bl	800201a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <HAL_InitTick+0x5c>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000008 	.word	0x20000008
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <HAL_GetTick+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000258 	.word	0x20000258

08001ea0 <__NVIC_SetPriorityGrouping>:
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed2:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	60d3      	str	r3, [r2, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_GetPriorityGrouping>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <__NVIC_GetPriorityGrouping+0x18>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	f003 0307 	and.w	r3, r3, #7
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_SetPriority>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db0a      	blt.n	8001f2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	490c      	ldr	r1, [pc, #48]	; (8001f50 <__NVIC_SetPriority+0x4c>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	0112      	lsls	r2, r2, #4
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	440b      	add	r3, r1
 8001f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f2c:	e00a      	b.n	8001f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4908      	ldr	r1, [pc, #32]	; (8001f54 <__NVIC_SetPriority+0x50>)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	3b04      	subs	r3, #4
 8001f3c:	0112      	lsls	r2, r2, #4
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	440b      	add	r3, r1
 8001f42:	761a      	strb	r2, [r3, #24]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000e100 	.word	0xe000e100
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <NVIC_EncodePriority>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f1c3 0307 	rsb	r3, r3, #7
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	bf28      	it	cs
 8001f76:	2304      	movcs	r3, #4
 8001f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	2b06      	cmp	r3, #6
 8001f80:	d902      	bls.n	8001f88 <NVIC_EncodePriority+0x30>
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3b03      	subs	r3, #3
 8001f86:	e000      	b.n	8001f8a <NVIC_EncodePriority+0x32>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43da      	mvns	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	43d9      	mvns	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	4313      	orrs	r3, r2
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <SysTick_Config>:
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd0:	d301      	bcc.n	8001fd6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00f      	b.n	8001ff6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <SysTick_Config+0x40>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fde:	210f      	movs	r1, #15
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fe4:	f7ff ff8e 	bl	8001f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <SysTick_Config+0x40>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <SysTick_Config+0x40>)
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	e000e010 	.word	0xe000e010

08002004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff47 	bl	8001ea0 <__NVIC_SetPriorityGrouping>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202c:	f7ff ff5c 	bl	8001ee8 <__NVIC_GetPriorityGrouping>
 8002030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	6978      	ldr	r0, [r7, #20]
 8002038:	f7ff ff8e 	bl	8001f58 <NVIC_EncodePriority>
 800203c:	4602      	mov	r2, r0
 800203e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff5d 	bl	8001f04 <__NVIC_SetPriority>
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ffb0 	bl	8001fc0 <SysTick_Config>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	e16b      	b.n	8002360 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002088:	2201      	movs	r2, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	f040 815a 	bne.w	800235a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d005      	beq.n	80020be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d130      	bne.n	8002120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f4:	2201      	movs	r2, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 0201 	and.w	r2, r3, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b03      	cmp	r3, #3
 800212a:	d017      	beq.n	800215c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d123      	bne.n	80021b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	08da      	lsrs	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3208      	adds	r2, #8
 8002170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	220f      	movs	r2, #15
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	08da      	lsrs	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3208      	adds	r2, #8
 80021aa:	69b9      	ldr	r1, [r7, #24]
 80021ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0203 	and.w	r2, r3, #3
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80b4 	beq.w	800235a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b60      	ldr	r3, [pc, #384]	; (8002378 <HAL_GPIO_Init+0x30c>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	4a5f      	ldr	r2, [pc, #380]	; (8002378 <HAL_GPIO_Init+0x30c>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002200:	6453      	str	r3, [r2, #68]	; 0x44
 8002202:	4b5d      	ldr	r3, [pc, #372]	; (8002378 <HAL_GPIO_Init+0x30c>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800220e:	4a5b      	ldr	r2, [pc, #364]	; (800237c <HAL_GPIO_Init+0x310>)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a52      	ldr	r2, [pc, #328]	; (8002380 <HAL_GPIO_Init+0x314>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d02b      	beq.n	8002292 <HAL_GPIO_Init+0x226>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a51      	ldr	r2, [pc, #324]	; (8002384 <HAL_GPIO_Init+0x318>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d025      	beq.n	800228e <HAL_GPIO_Init+0x222>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a50      	ldr	r2, [pc, #320]	; (8002388 <HAL_GPIO_Init+0x31c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01f      	beq.n	800228a <HAL_GPIO_Init+0x21e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4f      	ldr	r2, [pc, #316]	; (800238c <HAL_GPIO_Init+0x320>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d019      	beq.n	8002286 <HAL_GPIO_Init+0x21a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4e      	ldr	r2, [pc, #312]	; (8002390 <HAL_GPIO_Init+0x324>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d013      	beq.n	8002282 <HAL_GPIO_Init+0x216>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4d      	ldr	r2, [pc, #308]	; (8002394 <HAL_GPIO_Init+0x328>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00d      	beq.n	800227e <HAL_GPIO_Init+0x212>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4c      	ldr	r2, [pc, #304]	; (8002398 <HAL_GPIO_Init+0x32c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <HAL_GPIO_Init+0x20e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4b      	ldr	r2, [pc, #300]	; (800239c <HAL_GPIO_Init+0x330>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_GPIO_Init+0x20a>
 8002272:	2307      	movs	r3, #7
 8002274:	e00e      	b.n	8002294 <HAL_GPIO_Init+0x228>
 8002276:	2308      	movs	r3, #8
 8002278:	e00c      	b.n	8002294 <HAL_GPIO_Init+0x228>
 800227a:	2306      	movs	r3, #6
 800227c:	e00a      	b.n	8002294 <HAL_GPIO_Init+0x228>
 800227e:	2305      	movs	r3, #5
 8002280:	e008      	b.n	8002294 <HAL_GPIO_Init+0x228>
 8002282:	2304      	movs	r3, #4
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x228>
 8002286:	2303      	movs	r3, #3
 8002288:	e004      	b.n	8002294 <HAL_GPIO_Init+0x228>
 800228a:	2302      	movs	r3, #2
 800228c:	e002      	b.n	8002294 <HAL_GPIO_Init+0x228>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_GPIO_Init+0x228>
 8002292:	2300      	movs	r3, #0
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	f002 0203 	and.w	r2, r2, #3
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	4093      	lsls	r3, r2
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a4:	4935      	ldr	r1, [pc, #212]	; (800237c <HAL_GPIO_Init+0x310>)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	3302      	adds	r3, #2
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b2:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_GPIO_Init+0x334>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022d6:	4a32      	ldr	r2, [pc, #200]	; (80023a0 <HAL_GPIO_Init+0x334>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022dc:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <HAL_GPIO_Init+0x334>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002300:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <HAL_GPIO_Init+0x334>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002306:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <HAL_GPIO_Init+0x334>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800232a:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <HAL_GPIO_Init+0x334>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_GPIO_Init+0x334>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002354:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <HAL_GPIO_Init+0x334>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3301      	adds	r3, #1
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b0f      	cmp	r3, #15
 8002364:	f67f ae90 	bls.w	8002088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3724      	adds	r7, #36	; 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40013800 	.word	0x40013800
 8002380:	40020000 	.word	0x40020000
 8002384:	40020400 	.word	0x40020400
 8002388:	40020800 	.word	0x40020800
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40021000 	.word	0x40021000
 8002394:	40021400 	.word	0x40021400
 8002398:	40021800 	.word	0x40021800
 800239c:	40021c00 	.word	0x40021c00
 80023a0:	40013c00 	.word	0x40013c00

080023a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e001      	b.n	80023c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
 80023e0:	4613      	mov	r3, r2
 80023e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023e4:	787b      	ldrb	r3, [r7, #1]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023f0:	e003      	b.n	80023fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023f2:	887b      	ldrh	r3, [r7, #2]
 80023f4:	041a      	lsls	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	619a      	str	r2, [r3, #24]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e264      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d075      	beq.n	8002512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002426:	4ba3      	ldr	r3, [pc, #652]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b04      	cmp	r3, #4
 8002430:	d00c      	beq.n	800244c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002432:	4ba0      	ldr	r3, [pc, #640]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243a:	2b08      	cmp	r3, #8
 800243c:	d112      	bne.n	8002464 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243e:	4b9d      	ldr	r3, [pc, #628]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800244a:	d10b      	bne.n	8002464 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	4b99      	ldr	r3, [pc, #612]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d05b      	beq.n	8002510 <HAL_RCC_OscConfig+0x108>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d157      	bne.n	8002510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e23f      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246c:	d106      	bne.n	800247c <HAL_RCC_OscConfig+0x74>
 800246e:	4b91      	ldr	r3, [pc, #580]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a90      	ldr	r2, [pc, #576]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e01d      	b.n	80024b8 <HAL_RCC_OscConfig+0xb0>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x98>
 8002486:	4b8b      	ldr	r3, [pc, #556]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a8a      	ldr	r2, [pc, #552]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a87      	ldr	r2, [pc, #540]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e00b      	b.n	80024b8 <HAL_RCC_OscConfig+0xb0>
 80024a0:	4b84      	ldr	r3, [pc, #528]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a83      	ldr	r2, [pc, #524]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b81      	ldr	r3, [pc, #516]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a80      	ldr	r2, [pc, #512]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d013      	beq.n	80024e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fce2 	bl	8001e88 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c8:	f7ff fcde 	bl	8001e88 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e204      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b76      	ldr	r3, [pc, #472]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0xc0>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7ff fcce 	bl	8001e88 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f0:	f7ff fcca 	bl	8001e88 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e1f0      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	4b6c      	ldr	r3, [pc, #432]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0xe8>
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d063      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800251e:	4b65      	ldr	r3, [pc, #404]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252a:	4b62      	ldr	r3, [pc, #392]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002532:	2b08      	cmp	r3, #8
 8002534:	d11c      	bne.n	8002570 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002536:	4b5f      	ldr	r3, [pc, #380]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d116      	bne.n	8002570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	4b5c      	ldr	r3, [pc, #368]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_RCC_OscConfig+0x152>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e1c4      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4952      	ldr	r1, [pc, #328]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	e03a      	b.n	80025e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002578:	4b4f      	ldr	r3, [pc, #316]	; (80026b8 <HAL_RCC_OscConfig+0x2b0>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7ff fc83 	bl	8001e88 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002586:	f7ff fc7f 	bl	8001e88 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e1a5      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b43      	ldr	r3, [pc, #268]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4940      	ldr	r1, [pc, #256]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
 80025b8:	e015      	b.n	80025e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ba:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_RCC_OscConfig+0x2b0>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7ff fc62 	bl	8001e88 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c8:	f7ff fc5e 	bl	8001e88 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e184      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d030      	beq.n	8002654 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d016      	beq.n	8002628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fa:	4b30      	ldr	r3, [pc, #192]	; (80026bc <HAL_RCC_OscConfig+0x2b4>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7ff fc42 	bl	8001e88 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002608:	f7ff fc3e 	bl	8001e88 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e164      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x200>
 8002626:	e015      	b.n	8002654 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_RCC_OscConfig+0x2b4>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262e:	f7ff fc2b 	bl	8001e88 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002636:	f7ff fc27 	bl	8001e88 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e14d      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800264a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80a0 	beq.w	80027a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10f      	bne.n	8002692 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a0e      	ldr	r2, [pc, #56]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268e:	2301      	movs	r3, #1
 8002690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_OscConfig+0x2b8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d121      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_RCC_OscConfig+0x2b8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <HAL_RCC_OscConfig+0x2b8>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026aa:	f7ff fbed 	bl	8001e88 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	e011      	b.n	80026d6 <HAL_RCC_OscConfig+0x2ce>
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	42470000 	.word	0x42470000
 80026bc:	42470e80 	.word	0x42470e80
 80026c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c4:	f7ff fbe0 	bl	8001e88 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e106      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	4b85      	ldr	r3, [pc, #532]	; (80028ec <HAL_RCC_OscConfig+0x4e4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d106      	bne.n	80026f8 <HAL_RCC_OscConfig+0x2f0>
 80026ea:	4b81      	ldr	r3, [pc, #516]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a80      	ldr	r2, [pc, #512]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
 80026f6:	e01c      	b.n	8002732 <HAL_RCC_OscConfig+0x32a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b05      	cmp	r3, #5
 80026fe:	d10c      	bne.n	800271a <HAL_RCC_OscConfig+0x312>
 8002700:	4b7b      	ldr	r3, [pc, #492]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a7a      	ldr	r2, [pc, #488]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
 800270c:	4b78      	ldr	r3, [pc, #480]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a77      	ldr	r2, [pc, #476]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	e00b      	b.n	8002732 <HAL_RCC_OscConfig+0x32a>
 800271a:	4b75      	ldr	r3, [pc, #468]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a74      	ldr	r2, [pc, #464]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
 8002726:	4b72      	ldr	r3, [pc, #456]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a71      	ldr	r2, [pc, #452]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d015      	beq.n	8002766 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273a:	f7ff fba5 	bl	8001e88 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7ff fba1 	bl	8001e88 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0c5      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	4b65      	ldr	r3, [pc, #404]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ee      	beq.n	8002742 <HAL_RCC_OscConfig+0x33a>
 8002764:	e014      	b.n	8002790 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002766:	f7ff fb8f 	bl	8001e88 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7ff fb8b 	bl	8001e88 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0af      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002784:	4b5a      	ldr	r3, [pc, #360]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ee      	bne.n	800276e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d105      	bne.n	80027a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002796:	4b56      	ldr	r3, [pc, #344]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a55      	ldr	r2, [pc, #340]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 800279c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 809b 	beq.w	80028e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d05c      	beq.n	8002872 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d141      	bne.n	8002844 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c0:	4b4c      	ldr	r3, [pc, #304]	; (80028f4 <HAL_RCC_OscConfig+0x4ec>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7ff fb5f 	bl	8001e88 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ce:	f7ff fb5b 	bl	8001e88 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e081      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e0:	4b43      	ldr	r3, [pc, #268]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69da      	ldr	r2, [r3, #28]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	019b      	lsls	r3, r3, #6
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	085b      	lsrs	r3, r3, #1
 8002804:	3b01      	subs	r3, #1
 8002806:	041b      	lsls	r3, r3, #16
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	061b      	lsls	r3, r3, #24
 8002810:	4937      	ldr	r1, [pc, #220]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002816:	4b37      	ldr	r3, [pc, #220]	; (80028f4 <HAL_RCC_OscConfig+0x4ec>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7ff fb34 	bl	8001e88 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002824:	f7ff fb30 	bl	8001e88 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e056      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x41c>
 8002842:	e04e      	b.n	80028e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002844:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <HAL_RCC_OscConfig+0x4ec>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7ff fb1d 	bl	8001e88 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7ff fb19 	bl	8001e88 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e03f      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002864:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x44a>
 8002870:	e037      	b.n	80028e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e032      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_RCC_OscConfig+0x4e8>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d028      	beq.n	80028de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d121      	bne.n	80028de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d11a      	bne.n	80028de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028ae:	4013      	ands	r3, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d111      	bne.n	80028de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	085b      	lsrs	r3, r3, #1
 80028c6:	3b01      	subs	r3, #1
 80028c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d107      	bne.n	80028de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d001      	beq.n	80028e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40007000 	.word	0x40007000
 80028f0:	40023800 	.word	0x40023800
 80028f4:	42470060 	.word	0x42470060

080028f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0cc      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800290c:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d90c      	bls.n	8002934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b65      	ldr	r3, [pc, #404]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b63      	ldr	r3, [pc, #396]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0b8      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002964:	4b53      	ldr	r3, [pc, #332]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800296e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002970:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	494d      	ldr	r1, [pc, #308]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d044      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d119      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e07f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d003      	beq.n	80029b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b6:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e06f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c6:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e067      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d6:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4934      	ldr	r1, [pc, #208]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e8:	f7ff fa4e 	bl	8001e88 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f0:	f7ff fa4a 	bl	8001e88 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e04f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 020c 	and.w	r2, r3, #12
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d1eb      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d20c      	bcs.n	8002a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e032      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4916      	ldr	r1, [pc, #88]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a7e:	f000 f821 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8002a82:	4602      	mov	r2, r0
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	490a      	ldr	r1, [pc, #40]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	5ccb      	ldrb	r3, [r1, r3]
 8002a92:	fa22 f303 	lsr.w	r3, r2, r3
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff f9c2 	bl	8001e28 <HAL_InitTick>

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023c00 	.word	0x40023c00
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	0800437c 	.word	0x0800437c
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	20000004 	.word	0x20000004

08002ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002adc:	4b67      	ldr	r3, [pc, #412]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d00d      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	f200 80bd 	bhi.w	8002c68 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x34>
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x3a>
 8002af6:	e0b7      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af8:	4b61      	ldr	r3, [pc, #388]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002afa:	60bb      	str	r3, [r7, #8]
       break;
 8002afc:	e0b7      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002afe:	4b61      	ldr	r3, [pc, #388]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b00:	60bb      	str	r3, [r7, #8]
      break;
 8002b02:	e0b4      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b04:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b0e:	4b5b      	ldr	r3, [pc, #364]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d04d      	beq.n	8002bb6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1a:	4b58      	ldr	r3, [pc, #352]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	099b      	lsrs	r3, r3, #6
 8002b20:	461a      	mov	r2, r3
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b2a:	f04f 0100 	mov.w	r1, #0
 8002b2e:	ea02 0800 	and.w	r8, r2, r0
 8002b32:	ea03 0901 	and.w	r9, r3, r1
 8002b36:	4640      	mov	r0, r8
 8002b38:	4649      	mov	r1, r9
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	014b      	lsls	r3, r1, #5
 8002b44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b48:	0142      	lsls	r2, r0, #5
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	ebb0 0008 	subs.w	r0, r0, r8
 8002b52:	eb61 0109 	sbc.w	r1, r1, r9
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	018b      	lsls	r3, r1, #6
 8002b60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b64:	0182      	lsls	r2, r0, #6
 8002b66:	1a12      	subs	r2, r2, r0
 8002b68:	eb63 0301 	sbc.w	r3, r3, r1
 8002b6c:	f04f 0000 	mov.w	r0, #0
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	00d9      	lsls	r1, r3, #3
 8002b76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b7a:	00d0      	lsls	r0, r2, #3
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	eb12 0208 	adds.w	r2, r2, r8
 8002b84:	eb43 0309 	adc.w	r3, r3, r9
 8002b88:	f04f 0000 	mov.w	r0, #0
 8002b8c:	f04f 0100 	mov.w	r1, #0
 8002b90:	0259      	lsls	r1, r3, #9
 8002b92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b96:	0250      	lsls	r0, r2, #9
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	f7fd fb0e 	bl	80001c8 <__aeabi_uldivmod>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e04a      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb6:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	099b      	lsrs	r3, r3, #6
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bc6:	f04f 0100 	mov.w	r1, #0
 8002bca:	ea02 0400 	and.w	r4, r2, r0
 8002bce:	ea03 0501 	and.w	r5, r3, r1
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	014b      	lsls	r3, r1, #5
 8002be0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002be4:	0142      	lsls	r2, r0, #5
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	1b00      	subs	r0, r0, r4
 8002bec:	eb61 0105 	sbc.w	r1, r1, r5
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	018b      	lsls	r3, r1, #6
 8002bfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bfe:	0182      	lsls	r2, r0, #6
 8002c00:	1a12      	subs	r2, r2, r0
 8002c02:	eb63 0301 	sbc.w	r3, r3, r1
 8002c06:	f04f 0000 	mov.w	r0, #0
 8002c0a:	f04f 0100 	mov.w	r1, #0
 8002c0e:	00d9      	lsls	r1, r3, #3
 8002c10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c14:	00d0      	lsls	r0, r2, #3
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	1912      	adds	r2, r2, r4
 8002c1c:	eb45 0303 	adc.w	r3, r5, r3
 8002c20:	f04f 0000 	mov.w	r0, #0
 8002c24:	f04f 0100 	mov.w	r1, #0
 8002c28:	0299      	lsls	r1, r3, #10
 8002c2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c2e:	0290      	lsls	r0, r2, #10
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	f7fd fac2 	bl	80001c8 <__aeabi_uldivmod>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	3301      	adds	r3, #1
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c64:	60bb      	str	r3, [r7, #8]
      break;
 8002c66:	e002      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c6a:	60bb      	str	r3, [r7, #8]
      break;
 8002c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	00f42400 	.word	0x00f42400
 8002c84:	007a1200 	.word	0x007a1200

08002c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c8c:	4b03      	ldr	r3, [pc, #12]	; (8002c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000000 	.word	0x20000000

08002ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ca4:	f7ff fff0 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	0a9b      	lsrs	r3, r3, #10
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	4903      	ldr	r1, [pc, #12]	; (8002cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb6:	5ccb      	ldrb	r3, [r1, r3]
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	0800438c 	.word	0x0800438c

08002cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ccc:	f7ff ffdc 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	0b5b      	lsrs	r3, r3, #13
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	4903      	ldr	r1, [pc, #12]	; (8002cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cde:	5ccb      	ldrb	r3, [r1, r3]
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	0800438c 	.word	0x0800438c

08002cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e041      	b.n	8002d86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe ff20 	bl	8001b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	f000 fb2e 	bl	8003390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e041      	b.n	8002e24 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f839 	bl	8002e2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	f000 fadf 	bl	8003390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e041      	b.n	8002ed6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe fdc2 	bl	80019f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f000 fa86 	bl	8003390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e082      	b.n	8002ffe <HAL_TIM_IC_ConfigChannel+0x120>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d11b      	bne.n	8002f3e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f000 fd19 	bl	800394c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 020c 	bic.w	r2, r2, #12
 8002f28:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6999      	ldr	r1, [r3, #24]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	619a      	str	r2, [r3, #24]
 8002f3c:	e05a      	b.n	8002ff4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d11c      	bne.n	8002f7e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	6819      	ldr	r1, [r3, #0]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f000 fd9d 	bl	8003a92 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002f66:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6999      	ldr	r1, [r3, #24]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	021a      	lsls	r2, r3, #8
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	619a      	str	r2, [r3, #24]
 8002f7c:	e03a      	b.n	8002ff4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f000 fdea 	bl	8003b6c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 020c 	bic.w	r2, r2, #12
 8002fa6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69d9      	ldr	r1, [r3, #28]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	61da      	str	r2, [r3, #28]
 8002fba:	e01b      	b.n	8002ff4 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	6819      	ldr	r1, [r3, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f000 fe0a 	bl	8003be4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	69da      	ldr	r2, [r3, #28]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002fde:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69d9      	ldr	r1, [r3, #28]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	021a      	lsls	r2, r3, #8
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800301e:	2302      	movs	r3, #2
 8003020:	e0ac      	b.n	800317c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b0c      	cmp	r3, #12
 800302e:	f200 809f 	bhi.w	8003170 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003032:	a201      	add	r2, pc, #4	; (adr r2, 8003038 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003038:	0800306d 	.word	0x0800306d
 800303c:	08003171 	.word	0x08003171
 8003040:	08003171 	.word	0x08003171
 8003044:	08003171 	.word	0x08003171
 8003048:	080030ad 	.word	0x080030ad
 800304c:	08003171 	.word	0x08003171
 8003050:	08003171 	.word	0x08003171
 8003054:	08003171 	.word	0x08003171
 8003058:	080030ef 	.word	0x080030ef
 800305c:	08003171 	.word	0x08003171
 8003060:	08003171 	.word	0x08003171
 8003064:	08003171 	.word	0x08003171
 8003068:	0800312f 	.word	0x0800312f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fa2c 	bl	80034d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0208 	orr.w	r2, r2, #8
 8003086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0204 	bic.w	r2, r2, #4
 8003096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6999      	ldr	r1, [r3, #24]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	619a      	str	r2, [r3, #24]
      break;
 80030aa:	e062      	b.n	8003172 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fa7c 	bl	80035b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699a      	ldr	r2, [r3, #24]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6999      	ldr	r1, [r3, #24]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	021a      	lsls	r2, r3, #8
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	619a      	str	r2, [r3, #24]
      break;
 80030ec:	e041      	b.n	8003172 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fad1 	bl	800369c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 0208 	orr.w	r2, r2, #8
 8003108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0204 	bic.w	r2, r2, #4
 8003118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69d9      	ldr	r1, [r3, #28]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	61da      	str	r2, [r3, #28]
      break;
 800312c:	e021      	b.n	8003172 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fb25 	bl	8003784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69da      	ldr	r2, [r3, #28]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69d9      	ldr	r1, [r3, #28]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	021a      	lsls	r2, r3, #8
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	61da      	str	r2, [r3, #28]
      break;
 800316e:	e000      	b.n	8003172 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003170:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_TIM_ConfigClockSource+0x18>
 8003198:	2302      	movs	r3, #2
 800319a:	e0b3      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x180>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d4:	d03e      	beq.n	8003254 <HAL_TIM_ConfigClockSource+0xd0>
 80031d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031da:	f200 8087 	bhi.w	80032ec <HAL_TIM_ConfigClockSource+0x168>
 80031de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e2:	f000 8085 	beq.w	80032f0 <HAL_TIM_ConfigClockSource+0x16c>
 80031e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ea:	d87f      	bhi.n	80032ec <HAL_TIM_ConfigClockSource+0x168>
 80031ec:	2b70      	cmp	r3, #112	; 0x70
 80031ee:	d01a      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0xa2>
 80031f0:	2b70      	cmp	r3, #112	; 0x70
 80031f2:	d87b      	bhi.n	80032ec <HAL_TIM_ConfigClockSource+0x168>
 80031f4:	2b60      	cmp	r3, #96	; 0x60
 80031f6:	d050      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x116>
 80031f8:	2b60      	cmp	r3, #96	; 0x60
 80031fa:	d877      	bhi.n	80032ec <HAL_TIM_ConfigClockSource+0x168>
 80031fc:	2b50      	cmp	r3, #80	; 0x50
 80031fe:	d03c      	beq.n	800327a <HAL_TIM_ConfigClockSource+0xf6>
 8003200:	2b50      	cmp	r3, #80	; 0x50
 8003202:	d873      	bhi.n	80032ec <HAL_TIM_ConfigClockSource+0x168>
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d058      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0x136>
 8003208:	2b40      	cmp	r3, #64	; 0x40
 800320a:	d86f      	bhi.n	80032ec <HAL_TIM_ConfigClockSource+0x168>
 800320c:	2b30      	cmp	r3, #48	; 0x30
 800320e:	d064      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x156>
 8003210:	2b30      	cmp	r3, #48	; 0x30
 8003212:	d86b      	bhi.n	80032ec <HAL_TIM_ConfigClockSource+0x168>
 8003214:	2b20      	cmp	r3, #32
 8003216:	d060      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x156>
 8003218:	2b20      	cmp	r3, #32
 800321a:	d867      	bhi.n	80032ec <HAL_TIM_ConfigClockSource+0x168>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d05c      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x156>
 8003220:	2b10      	cmp	r3, #16
 8003222:	d05a      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003224:	e062      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6899      	ldr	r1, [r3, #8]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f000 fd2d 	bl	8003c94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003248:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	609a      	str	r2, [r3, #8]
      break;
 8003252:	e04e      	b.n	80032f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6899      	ldr	r1, [r3, #8]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f000 fd16 	bl	8003c94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003276:	609a      	str	r2, [r3, #8]
      break;
 8003278:	e03b      	b.n	80032f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6859      	ldr	r1, [r3, #4]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	461a      	mov	r2, r3
 8003288:	f000 fbd4 	bl	8003a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2150      	movs	r1, #80	; 0x50
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fce3 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 8003298:	e02b      	b.n	80032f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6859      	ldr	r1, [r3, #4]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	461a      	mov	r2, r3
 80032a8:	f000 fc30 	bl	8003b0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2160      	movs	r1, #96	; 0x60
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fcd3 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 80032b8:	e01b      	b.n	80032f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f000 fbb4 	bl	8003a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2140      	movs	r1, #64	; 0x40
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fcc3 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 80032d8:	e00b      	b.n	80032f2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4619      	mov	r1, r3
 80032e4:	4610      	mov	r0, r2
 80032e6:	f000 fcba 	bl	8003c5e <TIM_ITRx_SetConfig>
        break;
 80032ea:	e002      	b.n	80032f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032ec:	bf00      	nop
 80032ee:	e000      	b.n	80032f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003320:	2302      	movs	r3, #2
 8003322:	e031      	b.n	8003388 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003334:	6839      	ldr	r1, [r7, #0]
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa7a 	bl	8003830 <TIM_SlaveTimer_SetConfig>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e018      	b.n	8003388 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003364:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003374:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a40      	ldr	r2, [pc, #256]	; (80034a4 <TIM_Base_SetConfig+0x114>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d013      	beq.n	80033d0 <TIM_Base_SetConfig+0x40>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ae:	d00f      	beq.n	80033d0 <TIM_Base_SetConfig+0x40>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a3d      	ldr	r2, [pc, #244]	; (80034a8 <TIM_Base_SetConfig+0x118>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00b      	beq.n	80033d0 <TIM_Base_SetConfig+0x40>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a3c      	ldr	r2, [pc, #240]	; (80034ac <TIM_Base_SetConfig+0x11c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d007      	beq.n	80033d0 <TIM_Base_SetConfig+0x40>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a3b      	ldr	r2, [pc, #236]	; (80034b0 <TIM_Base_SetConfig+0x120>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d003      	beq.n	80033d0 <TIM_Base_SetConfig+0x40>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a3a      	ldr	r2, [pc, #232]	; (80034b4 <TIM_Base_SetConfig+0x124>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d108      	bne.n	80033e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2f      	ldr	r2, [pc, #188]	; (80034a4 <TIM_Base_SetConfig+0x114>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d02b      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f0:	d027      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a2c      	ldr	r2, [pc, #176]	; (80034a8 <TIM_Base_SetConfig+0x118>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d023      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a2b      	ldr	r2, [pc, #172]	; (80034ac <TIM_Base_SetConfig+0x11c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d01f      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a2a      	ldr	r2, [pc, #168]	; (80034b0 <TIM_Base_SetConfig+0x120>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d01b      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <TIM_Base_SetConfig+0x124>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d017      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a28      	ldr	r2, [pc, #160]	; (80034b8 <TIM_Base_SetConfig+0x128>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a27      	ldr	r2, [pc, #156]	; (80034bc <TIM_Base_SetConfig+0x12c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00f      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <TIM_Base_SetConfig+0x130>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00b      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a25      	ldr	r2, [pc, #148]	; (80034c4 <TIM_Base_SetConfig+0x134>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a24      	ldr	r2, [pc, #144]	; (80034c8 <TIM_Base_SetConfig+0x138>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d003      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a23      	ldr	r2, [pc, #140]	; (80034cc <TIM_Base_SetConfig+0x13c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d108      	bne.n	8003454 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <TIM_Base_SetConfig+0x114>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_Base_SetConfig+0xf8>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <TIM_Base_SetConfig+0x124>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d103      	bne.n	8003490 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	615a      	str	r2, [r3, #20]
}
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40010000 	.word	0x40010000
 80034a8:	40000400 	.word	0x40000400
 80034ac:	40000800 	.word	0x40000800
 80034b0:	40000c00 	.word	0x40000c00
 80034b4:	40010400 	.word	0x40010400
 80034b8:	40014000 	.word	0x40014000
 80034bc:	40014400 	.word	0x40014400
 80034c0:	40014800 	.word	0x40014800
 80034c4:	40001800 	.word	0x40001800
 80034c8:	40001c00 	.word	0x40001c00
 80034cc:	40002000 	.word	0x40002000

080034d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	f023 0201 	bic.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0303 	bic.w	r3, r3, #3
 8003506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f023 0302 	bic.w	r3, r3, #2
 8003518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a20      	ldr	r2, [pc, #128]	; (80035a8 <TIM_OC1_SetConfig+0xd8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_OC1_SetConfig+0x64>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a1f      	ldr	r2, [pc, #124]	; (80035ac <TIM_OC1_SetConfig+0xdc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d10c      	bne.n	800354e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f023 0308 	bic.w	r3, r3, #8
 800353a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <TIM_OC1_SetConfig+0xd8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d003      	beq.n	800355e <TIM_OC1_SetConfig+0x8e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a14      	ldr	r2, [pc, #80]	; (80035ac <TIM_OC1_SetConfig+0xdc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d111      	bne.n	8003582 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800356c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	621a      	str	r2, [r3, #32]
}
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40010400 	.word	0x40010400

080035b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f023 0210 	bic.w	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f023 0320 	bic.w	r3, r3, #32
 80035fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a22      	ldr	r2, [pc, #136]	; (8003694 <TIM_OC2_SetConfig+0xe4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d003      	beq.n	8003618 <TIM_OC2_SetConfig+0x68>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a21      	ldr	r2, [pc, #132]	; (8003698 <TIM_OC2_SetConfig+0xe8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d10d      	bne.n	8003634 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800361e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003632:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a17      	ldr	r2, [pc, #92]	; (8003694 <TIM_OC2_SetConfig+0xe4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_OC2_SetConfig+0x94>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a16      	ldr	r2, [pc, #88]	; (8003698 <TIM_OC2_SetConfig+0xe8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d113      	bne.n	800366c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800364a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40010000 	.word	0x40010000
 8003698:	40010400 	.word	0x40010400

0800369c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a21      	ldr	r2, [pc, #132]	; (800377c <TIM_OC3_SetConfig+0xe0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d003      	beq.n	8003702 <TIM_OC3_SetConfig+0x66>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a20      	ldr	r2, [pc, #128]	; (8003780 <TIM_OC3_SetConfig+0xe4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d10d      	bne.n	800371e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	021b      	lsls	r3, r3, #8
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800371c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a16      	ldr	r2, [pc, #88]	; (800377c <TIM_OC3_SetConfig+0xe0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_OC3_SetConfig+0x92>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a15      	ldr	r2, [pc, #84]	; (8003780 <TIM_OC3_SetConfig+0xe4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d113      	bne.n	8003756 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800373c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	621a      	str	r2, [r3, #32]
}
 8003770:	bf00      	nop
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40010000 	.word	0x40010000
 8003780:	40010400 	.word	0x40010400

08003784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	031b      	lsls	r3, r3, #12
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <TIM_OC4_SetConfig+0xa4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d003      	beq.n	80037ec <TIM_OC4_SetConfig+0x68>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a11      	ldr	r2, [pc, #68]	; (800382c <TIM_OC4_SetConfig+0xa8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d109      	bne.n	8003800 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	019b      	lsls	r3, r3, #6
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40010000 	.word	0x40010000
 800382c:	40010400 	.word	0x40010400

08003830 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003848:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f023 0307 	bic.w	r3, r3, #7
 800385a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b70      	cmp	r3, #112	; 0x70
 8003874:	d01a      	beq.n	80038ac <TIM_SlaveTimer_SetConfig+0x7c>
 8003876:	2b70      	cmp	r3, #112	; 0x70
 8003878:	d860      	bhi.n	800393c <TIM_SlaveTimer_SetConfig+0x10c>
 800387a:	2b60      	cmp	r3, #96	; 0x60
 800387c:	d054      	beq.n	8003928 <TIM_SlaveTimer_SetConfig+0xf8>
 800387e:	2b60      	cmp	r3, #96	; 0x60
 8003880:	d85c      	bhi.n	800393c <TIM_SlaveTimer_SetConfig+0x10c>
 8003882:	2b50      	cmp	r3, #80	; 0x50
 8003884:	d046      	beq.n	8003914 <TIM_SlaveTimer_SetConfig+0xe4>
 8003886:	2b50      	cmp	r3, #80	; 0x50
 8003888:	d858      	bhi.n	800393c <TIM_SlaveTimer_SetConfig+0x10c>
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d019      	beq.n	80038c2 <TIM_SlaveTimer_SetConfig+0x92>
 800388e:	2b40      	cmp	r3, #64	; 0x40
 8003890:	d854      	bhi.n	800393c <TIM_SlaveTimer_SetConfig+0x10c>
 8003892:	2b30      	cmp	r3, #48	; 0x30
 8003894:	d054      	beq.n	8003940 <TIM_SlaveTimer_SetConfig+0x110>
 8003896:	2b30      	cmp	r3, #48	; 0x30
 8003898:	d850      	bhi.n	800393c <TIM_SlaveTimer_SetConfig+0x10c>
 800389a:	2b20      	cmp	r3, #32
 800389c:	d050      	beq.n	8003940 <TIM_SlaveTimer_SetConfig+0x110>
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d84c      	bhi.n	800393c <TIM_SlaveTimer_SetConfig+0x10c>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d04c      	beq.n	8003940 <TIM_SlaveTimer_SetConfig+0x110>
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d04a      	beq.n	8003940 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80038aa:	e047      	b.n	800393c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68d9      	ldr	r1, [r3, #12]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f000 f9ea 	bl	8003c94 <TIM_ETR_SetConfig>
      break;
 80038c0:	e03f      	b.n	8003942 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b05      	cmp	r3, #5
 80038c8:	d101      	bne.n	80038ce <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e03a      	b.n	8003944 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6a1a      	ldr	r2, [r3, #32]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	621a      	str	r2, [r3, #32]
      break;
 8003912:	e016      	b.n	8003942 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	6899      	ldr	r1, [r3, #8]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	461a      	mov	r2, r3
 8003922:	f000 f887 	bl	8003a34 <TIM_TI1_ConfigInputStage>
      break;
 8003926:	e00c      	b.n	8003942 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6899      	ldr	r1, [r3, #8]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	461a      	mov	r2, r3
 8003936:	f000 f8e9 	bl	8003b0c <TIM_TI2_ConfigInputStage>
      break;
 800393a:	e002      	b.n	8003942 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800393c:	bf00      	nop
 800393e:	e000      	b.n	8003942 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8003940:	bf00      	nop
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f023 0201 	bic.w	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4a28      	ldr	r2, [pc, #160]	; (8003a18 <TIM_TI1_SetConfig+0xcc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d01b      	beq.n	80039b2 <TIM_TI1_SetConfig+0x66>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003980:	d017      	beq.n	80039b2 <TIM_TI1_SetConfig+0x66>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a25      	ldr	r2, [pc, #148]	; (8003a1c <TIM_TI1_SetConfig+0xd0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <TIM_TI1_SetConfig+0x66>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a24      	ldr	r2, [pc, #144]	; (8003a20 <TIM_TI1_SetConfig+0xd4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00f      	beq.n	80039b2 <TIM_TI1_SetConfig+0x66>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <TIM_TI1_SetConfig+0xd8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00b      	beq.n	80039b2 <TIM_TI1_SetConfig+0x66>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4a22      	ldr	r2, [pc, #136]	; (8003a28 <TIM_TI1_SetConfig+0xdc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d007      	beq.n	80039b2 <TIM_TI1_SetConfig+0x66>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4a21      	ldr	r2, [pc, #132]	; (8003a2c <TIM_TI1_SetConfig+0xe0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d003      	beq.n	80039b2 <TIM_TI1_SetConfig+0x66>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4a20      	ldr	r2, [pc, #128]	; (8003a30 <TIM_TI1_SetConfig+0xe4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <TIM_TI1_SetConfig+0x6a>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <TIM_TI1_SetConfig+0x6c>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e003      	b.n	80039d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f023 030a 	bic.w	r3, r3, #10
 80039f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f003 030a 	and.w	r3, r3, #10
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40010000 	.word	0x40010000
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40000800 	.word	0x40000800
 8003a24:	40000c00 	.word	0x40000c00
 8003a28:	40010400 	.word	0x40010400
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40001800 	.word	0x40001800

08003a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	f023 0201 	bic.w	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f023 030a 	bic.w	r3, r3, #10
 8003a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	621a      	str	r2, [r3, #32]
}
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b087      	sub	sp, #28
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f023 0210 	bic.w	r2, r3, #16
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003abe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	031b      	lsls	r3, r3, #12
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ae4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	621a      	str	r2, [r3, #32]
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f023 0210 	bic.w	r2, r3, #16
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	031b      	lsls	r3, r3, #12
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	621a      	str	r2, [r3, #32]
}
 8003b60:	bf00      	nop
 8003b62:	371c      	adds	r7, #28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f023 0303 	bic.w	r3, r3, #3
 8003b98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ba8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003bbc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	621a      	str	r2, [r3, #32]
}
 8003bd8:	bf00      	nop
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	031b      	lsls	r3, r3, #12
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003c36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	031b      	lsls	r3, r3, #12
 8003c3c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	621a      	str	r2, [r3, #32]
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f043 0307 	orr.w	r3, r3, #7
 8003c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	609a      	str	r2, [r3, #8]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	021a      	lsls	r2, r3, #8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	609a      	str	r2, [r3, #8]
}
 8003cc8:	bf00      	nop
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e05a      	b.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a21      	ldr	r2, [pc, #132]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d022      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d38:	d01d      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d018      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1a      	ldr	r2, [pc, #104]	; (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a18      	ldr	r2, [pc, #96]	; (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d009      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a17      	ldr	r2, [pc, #92]	; (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10c      	bne.n	8003d90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40010000 	.word	0x40010000
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40000800 	.word	0x40000800
 8003dbc:	40000c00 	.word	0x40000c00
 8003dc0:	40010400 	.word	0x40010400
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40001800 	.word	0x40001800

08003dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e03f      	b.n	8003e5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fd ff4e 	bl	8001c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2224      	movs	r2, #36	; 0x24
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f829 	bl	8003e68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e6c:	b09f      	sub	sp, #124	; 0x7c
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7e:	68d9      	ldr	r1, [r3, #12]
 8003e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	ea40 0301 	orr.w	r3, r0, r1
 8003e88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003eac:	f021 010c 	bic.w	r1, r1, #12
 8003eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec6:	6999      	ldr	r1, [r3, #24]
 8003ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	ea40 0301 	orr.w	r3, r0, r1
 8003ed0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4bc5      	ldr	r3, [pc, #788]	; (80041ec <UART_SetConfig+0x384>)
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d004      	beq.n	8003ee6 <UART_SetConfig+0x7e>
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4bc3      	ldr	r3, [pc, #780]	; (80041f0 <UART_SetConfig+0x388>)
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d103      	bne.n	8003eee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ee6:	f7fe feef 	bl	8002cc8 <HAL_RCC_GetPCLK2Freq>
 8003eea:	6778      	str	r0, [r7, #116]	; 0x74
 8003eec:	e002      	b.n	8003ef4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eee:	f7fe fed7 	bl	8002ca0 <HAL_RCC_GetPCLK1Freq>
 8003ef2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efc:	f040 80b6 	bne.w	800406c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f02:	461c      	mov	r4, r3
 8003f04:	f04f 0500 	mov.w	r5, #0
 8003f08:	4622      	mov	r2, r4
 8003f0a:	462b      	mov	r3, r5
 8003f0c:	1891      	adds	r1, r2, r2
 8003f0e:	6439      	str	r1, [r7, #64]	; 0x40
 8003f10:	415b      	adcs	r3, r3
 8003f12:	647b      	str	r3, [r7, #68]	; 0x44
 8003f14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f18:	1912      	adds	r2, r2, r4
 8003f1a:	eb45 0303 	adc.w	r3, r5, r3
 8003f1e:	f04f 0000 	mov.w	r0, #0
 8003f22:	f04f 0100 	mov.w	r1, #0
 8003f26:	00d9      	lsls	r1, r3, #3
 8003f28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f2c:	00d0      	lsls	r0, r2, #3
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	1911      	adds	r1, r2, r4
 8003f34:	6639      	str	r1, [r7, #96]	; 0x60
 8003f36:	416b      	adcs	r3, r5
 8003f38:	667b      	str	r3, [r7, #100]	; 0x64
 8003f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	1891      	adds	r1, r2, r2
 8003f46:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f48:	415b      	adcs	r3, r3
 8003f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f50:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f54:	f7fc f938 	bl	80001c8 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4ba5      	ldr	r3, [pc, #660]	; (80041f4 <UART_SetConfig+0x38c>)
 8003f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	011e      	lsls	r6, r3, #4
 8003f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f68:	461c      	mov	r4, r3
 8003f6a:	f04f 0500 	mov.w	r5, #0
 8003f6e:	4622      	mov	r2, r4
 8003f70:	462b      	mov	r3, r5
 8003f72:	1891      	adds	r1, r2, r2
 8003f74:	6339      	str	r1, [r7, #48]	; 0x30
 8003f76:	415b      	adcs	r3, r3
 8003f78:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f7e:	1912      	adds	r2, r2, r4
 8003f80:	eb45 0303 	adc.w	r3, r5, r3
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f04f 0100 	mov.w	r1, #0
 8003f8c:	00d9      	lsls	r1, r3, #3
 8003f8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f92:	00d0      	lsls	r0, r2, #3
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	1911      	adds	r1, r2, r4
 8003f9a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f9c:	416b      	adcs	r3, r5
 8003f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	1891      	adds	r1, r2, r2
 8003fac:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fae:	415b      	adcs	r3, r3
 8003fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fb6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003fba:	f7fc f905 	bl	80001c8 <__aeabi_uldivmod>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4b8c      	ldr	r3, [pc, #560]	; (80041f4 <UART_SetConfig+0x38c>)
 8003fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	2164      	movs	r1, #100	; 0x64
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	3332      	adds	r3, #50	; 0x32
 8003fd6:	4a87      	ldr	r2, [pc, #540]	; (80041f4 <UART_SetConfig+0x38c>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fe4:	441e      	add	r6, r3
 8003fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f04f 0100 	mov.w	r1, #0
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	1894      	adds	r4, r2, r2
 8003ff4:	623c      	str	r4, [r7, #32]
 8003ff6:	415b      	adcs	r3, r3
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ffe:	1812      	adds	r2, r2, r0
 8004000:	eb41 0303 	adc.w	r3, r1, r3
 8004004:	f04f 0400 	mov.w	r4, #0
 8004008:	f04f 0500 	mov.w	r5, #0
 800400c:	00dd      	lsls	r5, r3, #3
 800400e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004012:	00d4      	lsls	r4, r2, #3
 8004014:	4622      	mov	r2, r4
 8004016:	462b      	mov	r3, r5
 8004018:	1814      	adds	r4, r2, r0
 800401a:	653c      	str	r4, [r7, #80]	; 0x50
 800401c:	414b      	adcs	r3, r1
 800401e:	657b      	str	r3, [r7, #84]	; 0x54
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	461a      	mov	r2, r3
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	1891      	adds	r1, r2, r2
 800402c:	61b9      	str	r1, [r7, #24]
 800402e:	415b      	adcs	r3, r3
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004036:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800403a:	f7fc f8c5 	bl	80001c8 <__aeabi_uldivmod>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4b6c      	ldr	r3, [pc, #432]	; (80041f4 <UART_SetConfig+0x38c>)
 8004044:	fba3 1302 	umull	r1, r3, r3, r2
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	2164      	movs	r1, #100	; 0x64
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	3332      	adds	r3, #50	; 0x32
 8004056:	4a67      	ldr	r2, [pc, #412]	; (80041f4 <UART_SetConfig+0x38c>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	f003 0207 	and.w	r2, r3, #7
 8004062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4432      	add	r2, r6
 8004068:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800406a:	e0b9      	b.n	80041e0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800406c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800406e:	461c      	mov	r4, r3
 8004070:	f04f 0500 	mov.w	r5, #0
 8004074:	4622      	mov	r2, r4
 8004076:	462b      	mov	r3, r5
 8004078:	1891      	adds	r1, r2, r2
 800407a:	6139      	str	r1, [r7, #16]
 800407c:	415b      	adcs	r3, r3
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004084:	1912      	adds	r2, r2, r4
 8004086:	eb45 0303 	adc.w	r3, r5, r3
 800408a:	f04f 0000 	mov.w	r0, #0
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	00d9      	lsls	r1, r3, #3
 8004094:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004098:	00d0      	lsls	r0, r2, #3
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	eb12 0804 	adds.w	r8, r2, r4
 80040a2:	eb43 0905 	adc.w	r9, r3, r5
 80040a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f04f 0100 	mov.w	r1, #0
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	008b      	lsls	r3, r1, #2
 80040ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040be:	0082      	lsls	r2, r0, #2
 80040c0:	4640      	mov	r0, r8
 80040c2:	4649      	mov	r1, r9
 80040c4:	f7fc f880 	bl	80001c8 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4b49      	ldr	r3, [pc, #292]	; (80041f4 <UART_SetConfig+0x38c>)
 80040ce:	fba3 2302 	umull	r2, r3, r3, r2
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	011e      	lsls	r6, r3, #4
 80040d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d8:	4618      	mov	r0, r3
 80040da:	f04f 0100 	mov.w	r1, #0
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	1894      	adds	r4, r2, r2
 80040e4:	60bc      	str	r4, [r7, #8]
 80040e6:	415b      	adcs	r3, r3
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040ee:	1812      	adds	r2, r2, r0
 80040f0:	eb41 0303 	adc.w	r3, r1, r3
 80040f4:	f04f 0400 	mov.w	r4, #0
 80040f8:	f04f 0500 	mov.w	r5, #0
 80040fc:	00dd      	lsls	r5, r3, #3
 80040fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004102:	00d4      	lsls	r4, r2, #3
 8004104:	4622      	mov	r2, r4
 8004106:	462b      	mov	r3, r5
 8004108:	1814      	adds	r4, r2, r0
 800410a:	64bc      	str	r4, [r7, #72]	; 0x48
 800410c:	414b      	adcs	r3, r1
 800410e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4618      	mov	r0, r3
 8004116:	f04f 0100 	mov.w	r1, #0
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	008b      	lsls	r3, r1, #2
 8004124:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004128:	0082      	lsls	r2, r0, #2
 800412a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800412e:	f7fc f84b 	bl	80001c8 <__aeabi_uldivmod>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4b2f      	ldr	r3, [pc, #188]	; (80041f4 <UART_SetConfig+0x38c>)
 8004138:	fba3 1302 	umull	r1, r3, r3, r2
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	2164      	movs	r1, #100	; 0x64
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	3332      	adds	r3, #50	; 0x32
 800414a:	4a2a      	ldr	r2, [pc, #168]	; (80041f4 <UART_SetConfig+0x38c>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004156:	441e      	add	r6, r3
 8004158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800415a:	4618      	mov	r0, r3
 800415c:	f04f 0100 	mov.w	r1, #0
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	1894      	adds	r4, r2, r2
 8004166:	603c      	str	r4, [r7, #0]
 8004168:	415b      	adcs	r3, r3
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004170:	1812      	adds	r2, r2, r0
 8004172:	eb41 0303 	adc.w	r3, r1, r3
 8004176:	f04f 0400 	mov.w	r4, #0
 800417a:	f04f 0500 	mov.w	r5, #0
 800417e:	00dd      	lsls	r5, r3, #3
 8004180:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004184:	00d4      	lsls	r4, r2, #3
 8004186:	4622      	mov	r2, r4
 8004188:	462b      	mov	r3, r5
 800418a:	eb12 0a00 	adds.w	sl, r2, r0
 800418e:	eb43 0b01 	adc.w	fp, r3, r1
 8004192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4618      	mov	r0, r3
 8004198:	f04f 0100 	mov.w	r1, #0
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	008b      	lsls	r3, r1, #2
 80041a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041aa:	0082      	lsls	r2, r0, #2
 80041ac:	4650      	mov	r0, sl
 80041ae:	4659      	mov	r1, fp
 80041b0:	f7fc f80a 	bl	80001c8 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <UART_SetConfig+0x38c>)
 80041ba:	fba3 1302 	umull	r1, r3, r3, r2
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2164      	movs	r1, #100	; 0x64
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	3332      	adds	r3, #50	; 0x32
 80041cc:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <UART_SetConfig+0x38c>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	f003 020f 	and.w	r2, r3, #15
 80041d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4432      	add	r2, r6
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	377c      	adds	r7, #124	; 0x7c
 80041e4:	46bd      	mov	sp, r7
 80041e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ea:	bf00      	nop
 80041ec:	40011000 	.word	0x40011000
 80041f0:	40011400 	.word	0x40011400
 80041f4:	51eb851f 	.word	0x51eb851f

080041f8 <_ZdlPvj>:
 80041f8:	f000 b800 	b.w	80041fc <_ZdlPv>

080041fc <_ZdlPv>:
 80041fc:	f000 b824 	b.w	8004248 <free>

08004200 <__libc_init_array>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	4d0d      	ldr	r5, [pc, #52]	; (8004238 <__libc_init_array+0x38>)
 8004204:	4c0d      	ldr	r4, [pc, #52]	; (800423c <__libc_init_array+0x3c>)
 8004206:	1b64      	subs	r4, r4, r5
 8004208:	10a4      	asrs	r4, r4, #2
 800420a:	2600      	movs	r6, #0
 800420c:	42a6      	cmp	r6, r4
 800420e:	d109      	bne.n	8004224 <__libc_init_array+0x24>
 8004210:	4d0b      	ldr	r5, [pc, #44]	; (8004240 <__libc_init_array+0x40>)
 8004212:	4c0c      	ldr	r4, [pc, #48]	; (8004244 <__libc_init_array+0x44>)
 8004214:	f000 f886 	bl	8004324 <_init>
 8004218:	1b64      	subs	r4, r4, r5
 800421a:	10a4      	asrs	r4, r4, #2
 800421c:	2600      	movs	r6, #0
 800421e:	42a6      	cmp	r6, r4
 8004220:	d105      	bne.n	800422e <__libc_init_array+0x2e>
 8004222:	bd70      	pop	{r4, r5, r6, pc}
 8004224:	f855 3b04 	ldr.w	r3, [r5], #4
 8004228:	4798      	blx	r3
 800422a:	3601      	adds	r6, #1
 800422c:	e7ee      	b.n	800420c <__libc_init_array+0xc>
 800422e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004232:	4798      	blx	r3
 8004234:	3601      	adds	r6, #1
 8004236:	e7f2      	b.n	800421e <__libc_init_array+0x1e>
 8004238:	0800439c 	.word	0x0800439c
 800423c:	0800439c 	.word	0x0800439c
 8004240:	0800439c 	.word	0x0800439c
 8004244:	080043b0 	.word	0x080043b0

08004248 <free>:
 8004248:	4b02      	ldr	r3, [pc, #8]	; (8004254 <free+0xc>)
 800424a:	4601      	mov	r1, r0
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	f000 b80b 	b.w	8004268 <_free_r>
 8004252:	bf00      	nop
 8004254:	2000000c 	.word	0x2000000c

08004258 <memset>:
 8004258:	4402      	add	r2, r0
 800425a:	4603      	mov	r3, r0
 800425c:	4293      	cmp	r3, r2
 800425e:	d100      	bne.n	8004262 <memset+0xa>
 8004260:	4770      	bx	lr
 8004262:	f803 1b01 	strb.w	r1, [r3], #1
 8004266:	e7f9      	b.n	800425c <memset+0x4>

08004268 <_free_r>:
 8004268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800426a:	2900      	cmp	r1, #0
 800426c:	d048      	beq.n	8004300 <_free_r+0x98>
 800426e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004272:	9001      	str	r0, [sp, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f1a1 0404 	sub.w	r4, r1, #4
 800427a:	bfb8      	it	lt
 800427c:	18e4      	addlt	r4, r4, r3
 800427e:	f000 f843 	bl	8004308 <__malloc_lock>
 8004282:	4a20      	ldr	r2, [pc, #128]	; (8004304 <_free_r+0x9c>)
 8004284:	9801      	ldr	r0, [sp, #4]
 8004286:	6813      	ldr	r3, [r2, #0]
 8004288:	4615      	mov	r5, r2
 800428a:	b933      	cbnz	r3, 800429a <_free_r+0x32>
 800428c:	6063      	str	r3, [r4, #4]
 800428e:	6014      	str	r4, [r2, #0]
 8004290:	b003      	add	sp, #12
 8004292:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004296:	f000 b83d 	b.w	8004314 <__malloc_unlock>
 800429a:	42a3      	cmp	r3, r4
 800429c:	d90b      	bls.n	80042b6 <_free_r+0x4e>
 800429e:	6821      	ldr	r1, [r4, #0]
 80042a0:	1862      	adds	r2, r4, r1
 80042a2:	4293      	cmp	r3, r2
 80042a4:	bf04      	itt	eq
 80042a6:	681a      	ldreq	r2, [r3, #0]
 80042a8:	685b      	ldreq	r3, [r3, #4]
 80042aa:	6063      	str	r3, [r4, #4]
 80042ac:	bf04      	itt	eq
 80042ae:	1852      	addeq	r2, r2, r1
 80042b0:	6022      	streq	r2, [r4, #0]
 80042b2:	602c      	str	r4, [r5, #0]
 80042b4:	e7ec      	b.n	8004290 <_free_r+0x28>
 80042b6:	461a      	mov	r2, r3
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	b10b      	cbz	r3, 80042c0 <_free_r+0x58>
 80042bc:	42a3      	cmp	r3, r4
 80042be:	d9fa      	bls.n	80042b6 <_free_r+0x4e>
 80042c0:	6811      	ldr	r1, [r2, #0]
 80042c2:	1855      	adds	r5, r2, r1
 80042c4:	42a5      	cmp	r5, r4
 80042c6:	d10b      	bne.n	80042e0 <_free_r+0x78>
 80042c8:	6824      	ldr	r4, [r4, #0]
 80042ca:	4421      	add	r1, r4
 80042cc:	1854      	adds	r4, r2, r1
 80042ce:	42a3      	cmp	r3, r4
 80042d0:	6011      	str	r1, [r2, #0]
 80042d2:	d1dd      	bne.n	8004290 <_free_r+0x28>
 80042d4:	681c      	ldr	r4, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	6053      	str	r3, [r2, #4]
 80042da:	4421      	add	r1, r4
 80042dc:	6011      	str	r1, [r2, #0]
 80042de:	e7d7      	b.n	8004290 <_free_r+0x28>
 80042e0:	d902      	bls.n	80042e8 <_free_r+0x80>
 80042e2:	230c      	movs	r3, #12
 80042e4:	6003      	str	r3, [r0, #0]
 80042e6:	e7d3      	b.n	8004290 <_free_r+0x28>
 80042e8:	6825      	ldr	r5, [r4, #0]
 80042ea:	1961      	adds	r1, r4, r5
 80042ec:	428b      	cmp	r3, r1
 80042ee:	bf04      	itt	eq
 80042f0:	6819      	ldreq	r1, [r3, #0]
 80042f2:	685b      	ldreq	r3, [r3, #4]
 80042f4:	6063      	str	r3, [r4, #4]
 80042f6:	bf04      	itt	eq
 80042f8:	1949      	addeq	r1, r1, r5
 80042fa:	6021      	streq	r1, [r4, #0]
 80042fc:	6054      	str	r4, [r2, #4]
 80042fe:	e7c7      	b.n	8004290 <_free_r+0x28>
 8004300:	b003      	add	sp, #12
 8004302:	bd30      	pop	{r4, r5, pc}
 8004304:	20000254 	.word	0x20000254

08004308 <__malloc_lock>:
 8004308:	4801      	ldr	r0, [pc, #4]	; (8004310 <__malloc_lock+0x8>)
 800430a:	f000 b809 	b.w	8004320 <__retarget_lock_acquire_recursive>
 800430e:	bf00      	nop
 8004310:	20000260 	.word	0x20000260

08004314 <__malloc_unlock>:
 8004314:	4801      	ldr	r0, [pc, #4]	; (800431c <__malloc_unlock+0x8>)
 8004316:	f000 b804 	b.w	8004322 <__retarget_lock_release_recursive>
 800431a:	bf00      	nop
 800431c:	20000260 	.word	0x20000260

08004320 <__retarget_lock_acquire_recursive>:
 8004320:	4770      	bx	lr

08004322 <__retarget_lock_release_recursive>:
 8004322:	4770      	bx	lr

08004324 <_init>:
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004326:	bf00      	nop
 8004328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432a:	bc08      	pop	{r3}
 800432c:	469e      	mov	lr, r3
 800432e:	4770      	bx	lr

08004330 <_fini>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	bf00      	nop
 8004334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004336:	bc08      	pop	{r3}
 8004338:	469e      	mov	lr, r3
 800433a:	4770      	bx	lr
